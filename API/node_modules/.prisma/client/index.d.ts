
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model dns_servers
 * 
 */
export type dns_servers = $Result.DefaultSelection<Prisma.$dns_serversPayload>
/**
 * Model domain_dns_server
 * 
 */
export type domain_dns_server = $Result.DefaultSelection<Prisma.$domain_dns_serverPayload>
/**
 * Model domains
 * 
 */
export type domains = $Result.DefaultSelection<Prisma.$domainsPayload>
/**
 * Model record_type
 * 
 */
export type record_type = $Result.DefaultSelection<Prisma.$record_typePayload>
/**
 * Model records
 * 
 */
export type records = $Result.DefaultSelection<Prisma.$recordsPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model status
 * 
 */
export type status = $Result.DefaultSelection<Prisma.$statusPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dns_servers
 * const dns_servers = await prisma.dns_servers.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dns_servers
   * const dns_servers = await prisma.dns_servers.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.dns_servers`: Exposes CRUD operations for the **dns_servers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dns_servers
    * const dns_servers = await prisma.dns_servers.findMany()
    * ```
    */
  get dns_servers(): Prisma.dns_serversDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.domain_dns_server`: Exposes CRUD operations for the **domain_dns_server** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domain_dns_servers
    * const domain_dns_servers = await prisma.domain_dns_server.findMany()
    * ```
    */
  get domain_dns_server(): Prisma.domain_dns_serverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.domains`: Exposes CRUD operations for the **domains** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domains
    * const domains = await prisma.domains.findMany()
    * ```
    */
  get domains(): Prisma.domainsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.record_type`: Exposes CRUD operations for the **record_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Record_types
    * const record_types = await prisma.record_type.findMany()
    * ```
    */
  get record_type(): Prisma.record_typeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.records`: Exposes CRUD operations for the **records** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records
    * const records = await prisma.records.findMany()
    * ```
    */
  get records(): Prisma.recordsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.statusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.1
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    dns_servers: 'dns_servers',
    domain_dns_server: 'domain_dns_server',
    domains: 'domains',
    record_type: 'record_type',
    records: 'records',
    role: 'role',
    status: 'status',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "dns_servers" | "domain_dns_server" | "domains" | "record_type" | "records" | "role" | "status" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      dns_servers: {
        payload: Prisma.$dns_serversPayload<ExtArgs>
        fields: Prisma.dns_serversFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dns_serversFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dns_serversFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          findFirst: {
            args: Prisma.dns_serversFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dns_serversFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          findMany: {
            args: Prisma.dns_serversFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>[]
          }
          create: {
            args: Prisma.dns_serversCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          createMany: {
            args: Prisma.dns_serversCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.dns_serversCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>[]
          }
          delete: {
            args: Prisma.dns_serversDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          update: {
            args: Prisma.dns_serversUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          deleteMany: {
            args: Prisma.dns_serversDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.dns_serversUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.dns_serversUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>[]
          }
          upsert: {
            args: Prisma.dns_serversUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dns_serversPayload>
          }
          aggregate: {
            args: Prisma.Dns_serversAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDns_servers>
          }
          groupBy: {
            args: Prisma.dns_serversGroupByArgs<ExtArgs>
            result: $Utils.Optional<Dns_serversGroupByOutputType>[]
          }
          count: {
            args: Prisma.dns_serversCountArgs<ExtArgs>
            result: $Utils.Optional<Dns_serversCountAggregateOutputType> | number
          }
        }
      }
      domain_dns_server: {
        payload: Prisma.$domain_dns_serverPayload<ExtArgs>
        fields: Prisma.domain_dns_serverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.domain_dns_serverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.domain_dns_serverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          findFirst: {
            args: Prisma.domain_dns_serverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.domain_dns_serverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          findMany: {
            args: Prisma.domain_dns_serverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>[]
          }
          create: {
            args: Prisma.domain_dns_serverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          createMany: {
            args: Prisma.domain_dns_serverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.domain_dns_serverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>[]
          }
          delete: {
            args: Prisma.domain_dns_serverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          update: {
            args: Prisma.domain_dns_serverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          deleteMany: {
            args: Prisma.domain_dns_serverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.domain_dns_serverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.domain_dns_serverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>[]
          }
          upsert: {
            args: Prisma.domain_dns_serverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domain_dns_serverPayload>
          }
          aggregate: {
            args: Prisma.Domain_dns_serverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDomain_dns_server>
          }
          groupBy: {
            args: Prisma.domain_dns_serverGroupByArgs<ExtArgs>
            result: $Utils.Optional<Domain_dns_serverGroupByOutputType>[]
          }
          count: {
            args: Prisma.domain_dns_serverCountArgs<ExtArgs>
            result: $Utils.Optional<Domain_dns_serverCountAggregateOutputType> | number
          }
        }
      }
      domains: {
        payload: Prisma.$domainsPayload<ExtArgs>
        fields: Prisma.domainsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.domainsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.domainsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          findFirst: {
            args: Prisma.domainsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.domainsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          findMany: {
            args: Prisma.domainsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>[]
          }
          create: {
            args: Prisma.domainsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          createMany: {
            args: Prisma.domainsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.domainsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>[]
          }
          delete: {
            args: Prisma.domainsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          update: {
            args: Prisma.domainsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          deleteMany: {
            args: Prisma.domainsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.domainsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.domainsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>[]
          }
          upsert: {
            args: Prisma.domainsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$domainsPayload>
          }
          aggregate: {
            args: Prisma.DomainsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDomains>
          }
          groupBy: {
            args: Prisma.domainsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DomainsGroupByOutputType>[]
          }
          count: {
            args: Prisma.domainsCountArgs<ExtArgs>
            result: $Utils.Optional<DomainsCountAggregateOutputType> | number
          }
        }
      }
      record_type: {
        payload: Prisma.$record_typePayload<ExtArgs>
        fields: Prisma.record_typeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.record_typeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.record_typeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          findFirst: {
            args: Prisma.record_typeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.record_typeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          findMany: {
            args: Prisma.record_typeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>[]
          }
          create: {
            args: Prisma.record_typeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          createMany: {
            args: Prisma.record_typeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.record_typeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>[]
          }
          delete: {
            args: Prisma.record_typeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          update: {
            args: Prisma.record_typeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          deleteMany: {
            args: Prisma.record_typeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.record_typeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.record_typeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>[]
          }
          upsert: {
            args: Prisma.record_typeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$record_typePayload>
          }
          aggregate: {
            args: Prisma.Record_typeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecord_type>
          }
          groupBy: {
            args: Prisma.record_typeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Record_typeGroupByOutputType>[]
          }
          count: {
            args: Prisma.record_typeCountArgs<ExtArgs>
            result: $Utils.Optional<Record_typeCountAggregateOutputType> | number
          }
        }
      }
      records: {
        payload: Prisma.$recordsPayload<ExtArgs>
        fields: Prisma.recordsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.recordsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recordsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          findFirst: {
            args: Prisma.recordsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recordsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          findMany: {
            args: Prisma.recordsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>[]
          }
          create: {
            args: Prisma.recordsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          createMany: {
            args: Prisma.recordsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.recordsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>[]
          }
          delete: {
            args: Prisma.recordsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          update: {
            args: Prisma.recordsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          deleteMany: {
            args: Prisma.recordsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.recordsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.recordsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>[]
          }
          upsert: {
            args: Prisma.recordsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recordsPayload>
          }
          aggregate: {
            args: Prisma.RecordsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecords>
          }
          groupBy: {
            args: Prisma.recordsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecordsGroupByOutputType>[]
          }
          count: {
            args: Prisma.recordsCountArgs<ExtArgs>
            result: $Utils.Optional<RecordsCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.roleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.roleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      status: {
        payload: Prisma.$statusPayload<ExtArgs>
        fields: Prisma.statusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          findFirst: {
            args: Prisma.statusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          findMany: {
            args: Prisma.statusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>[]
          }
          create: {
            args: Prisma.statusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          createMany: {
            args: Prisma.statusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.statusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>[]
          }
          delete: {
            args: Prisma.statusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          update: {
            args: Prisma.statusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          deleteMany: {
            args: Prisma.statusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.statusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>[]
          }
          upsert: {
            args: Prisma.statusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.statusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    dns_servers?: dns_serversOmit
    domain_dns_server?: domain_dns_serverOmit
    domains?: domainsOmit
    record_type?: record_typeOmit
    records?: recordsOmit
    role?: roleOmit
    status?: statusOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Dns_serversCountOutputType
   */

  export type Dns_serversCountOutputType = {
    domain_dns_server: number
  }

  export type Dns_serversCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | Dns_serversCountOutputTypeCountDomain_dns_serverArgs
  }

  // Custom InputTypes
  /**
   * Dns_serversCountOutputType without action
   */
  export type Dns_serversCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dns_serversCountOutputType
     */
    select?: Dns_serversCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Dns_serversCountOutputType without action
   */
  export type Dns_serversCountOutputTypeCountDomain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domain_dns_serverWhereInput
  }


  /**
   * Count Type DomainsCountOutputType
   */

  export type DomainsCountOutputType = {
    domain_dns_server: number
    records: number
  }

  export type DomainsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | DomainsCountOutputTypeCountDomain_dns_serverArgs
    records?: boolean | DomainsCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes
  /**
   * DomainsCountOutputType without action
   */
  export type DomainsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DomainsCountOutputType
     */
    select?: DomainsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DomainsCountOutputType without action
   */
  export type DomainsCountOutputTypeCountDomain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domain_dns_serverWhereInput
  }

  /**
   * DomainsCountOutputType without action
   */
  export type DomainsCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recordsWhereInput
  }


  /**
   * Count Type Record_typeCountOutputType
   */

  export type Record_typeCountOutputType = {
    records: number
  }

  export type Record_typeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | Record_typeCountOutputTypeCountRecordsArgs
  }

  // Custom InputTypes
  /**
   * Record_typeCountOutputType without action
   */
  export type Record_typeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record_typeCountOutputType
     */
    select?: Record_typeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Record_typeCountOutputType without action
   */
  export type Record_typeCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recordsWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    domain_dns_server: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | StatusCountOutputTypeCountDomain_dns_serverArgs
  }

  // Custom InputTypes
  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountDomain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domain_dns_serverWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    domains: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | UsersCountOutputTypeCountDomainsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountDomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domainsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model dns_servers
   */

  export type AggregateDns_servers = {
    _count: Dns_serversCountAggregateOutputType | null
    _avg: Dns_serversAvgAggregateOutputType | null
    _sum: Dns_serversSumAggregateOutputType | null
    _min: Dns_serversMinAggregateOutputType | null
    _max: Dns_serversMaxAggregateOutputType | null
  }

  export type Dns_serversAvgAggregateOutputType = {
    id: number | null
  }

  export type Dns_serversSumAggregateOutputType = {
    id: number | null
  }

  export type Dns_serversMinAggregateOutputType = {
    id: number | null
    ip_address: string | null
    url: string | null
    created_at: Date | null
  }

  export type Dns_serversMaxAggregateOutputType = {
    id: number | null
    ip_address: string | null
    url: string | null
    created_at: Date | null
  }

  export type Dns_serversCountAggregateOutputType = {
    id: number
    ip_address: number
    url: number
    created_at: number
    _all: number
  }


  export type Dns_serversAvgAggregateInputType = {
    id?: true
  }

  export type Dns_serversSumAggregateInputType = {
    id?: true
  }

  export type Dns_serversMinAggregateInputType = {
    id?: true
    ip_address?: true
    url?: true
    created_at?: true
  }

  export type Dns_serversMaxAggregateInputType = {
    id?: true
    ip_address?: true
    url?: true
    created_at?: true
  }

  export type Dns_serversCountAggregateInputType = {
    id?: true
    ip_address?: true
    url?: true
    created_at?: true
    _all?: true
  }

  export type Dns_serversAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dns_servers to aggregate.
     */
    where?: dns_serversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dns_servers to fetch.
     */
    orderBy?: dns_serversOrderByWithRelationInput | dns_serversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dns_serversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dns_servers
    **/
    _count?: true | Dns_serversCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Dns_serversAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Dns_serversSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Dns_serversMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Dns_serversMaxAggregateInputType
  }

  export type GetDns_serversAggregateType<T extends Dns_serversAggregateArgs> = {
        [P in keyof T & keyof AggregateDns_servers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDns_servers[P]>
      : GetScalarType<T[P], AggregateDns_servers[P]>
  }




  export type dns_serversGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dns_serversWhereInput
    orderBy?: dns_serversOrderByWithAggregationInput | dns_serversOrderByWithAggregationInput[]
    by: Dns_serversScalarFieldEnum[] | Dns_serversScalarFieldEnum
    having?: dns_serversScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Dns_serversCountAggregateInputType | true
    _avg?: Dns_serversAvgAggregateInputType
    _sum?: Dns_serversSumAggregateInputType
    _min?: Dns_serversMinAggregateInputType
    _max?: Dns_serversMaxAggregateInputType
  }

  export type Dns_serversGroupByOutputType = {
    id: number
    ip_address: string
    url: string | null
    created_at: Date | null
    _count: Dns_serversCountAggregateOutputType | null
    _avg: Dns_serversAvgAggregateOutputType | null
    _sum: Dns_serversSumAggregateOutputType | null
    _min: Dns_serversMinAggregateOutputType | null
    _max: Dns_serversMaxAggregateOutputType | null
  }

  type GetDns_serversGroupByPayload<T extends dns_serversGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Dns_serversGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Dns_serversGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Dns_serversGroupByOutputType[P]>
            : GetScalarType<T[P], Dns_serversGroupByOutputType[P]>
        }
      >
    >


  export type dns_serversSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip_address?: boolean
    url?: boolean
    created_at?: boolean
    domain_dns_server?: boolean | dns_servers$domain_dns_serverArgs<ExtArgs>
    _count?: boolean | Dns_serversCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dns_servers"]>

  export type dns_serversSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip_address?: boolean
    url?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["dns_servers"]>

  export type dns_serversSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip_address?: boolean
    url?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["dns_servers"]>

  export type dns_serversSelectScalar = {
    id?: boolean
    ip_address?: boolean
    url?: boolean
    created_at?: boolean
  }

  export type dns_serversOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ip_address" | "url" | "created_at", ExtArgs["result"]["dns_servers"]>
  export type dns_serversInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | dns_servers$domain_dns_serverArgs<ExtArgs>
    _count?: boolean | Dns_serversCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type dns_serversIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type dns_serversIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $dns_serversPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "dns_servers"
    objects: {
      domain_dns_server: Prisma.$domain_dns_serverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ip_address: string
      url: string | null
      created_at: Date | null
    }, ExtArgs["result"]["dns_servers"]>
    composites: {}
  }

  type dns_serversGetPayload<S extends boolean | null | undefined | dns_serversDefaultArgs> = $Result.GetResult<Prisma.$dns_serversPayload, S>

  type dns_serversCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<dns_serversFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Dns_serversCountAggregateInputType | true
    }

  export interface dns_serversDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dns_servers'], meta: { name: 'dns_servers' } }
    /**
     * Find zero or one Dns_servers that matches the filter.
     * @param {dns_serversFindUniqueArgs} args - Arguments to find a Dns_servers
     * @example
     * // Get one Dns_servers
     * const dns_servers = await prisma.dns_servers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends dns_serversFindUniqueArgs>(args: SelectSubset<T, dns_serversFindUniqueArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Dns_servers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {dns_serversFindUniqueOrThrowArgs} args - Arguments to find a Dns_servers
     * @example
     * // Get one Dns_servers
     * const dns_servers = await prisma.dns_servers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends dns_serversFindUniqueOrThrowArgs>(args: SelectSubset<T, dns_serversFindUniqueOrThrowArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Dns_servers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversFindFirstArgs} args - Arguments to find a Dns_servers
     * @example
     * // Get one Dns_servers
     * const dns_servers = await prisma.dns_servers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends dns_serversFindFirstArgs>(args?: SelectSubset<T, dns_serversFindFirstArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Dns_servers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversFindFirstOrThrowArgs} args - Arguments to find a Dns_servers
     * @example
     * // Get one Dns_servers
     * const dns_servers = await prisma.dns_servers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends dns_serversFindFirstOrThrowArgs>(args?: SelectSubset<T, dns_serversFindFirstOrThrowArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Dns_servers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dns_servers
     * const dns_servers = await prisma.dns_servers.findMany()
     * 
     * // Get first 10 Dns_servers
     * const dns_servers = await prisma.dns_servers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dns_serversWithIdOnly = await prisma.dns_servers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends dns_serversFindManyArgs>(args?: SelectSubset<T, dns_serversFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Dns_servers.
     * @param {dns_serversCreateArgs} args - Arguments to create a Dns_servers.
     * @example
     * // Create one Dns_servers
     * const Dns_servers = await prisma.dns_servers.create({
     *   data: {
     *     // ... data to create a Dns_servers
     *   }
     * })
     * 
     */
    create<T extends dns_serversCreateArgs>(args: SelectSubset<T, dns_serversCreateArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Dns_servers.
     * @param {dns_serversCreateManyArgs} args - Arguments to create many Dns_servers.
     * @example
     * // Create many Dns_servers
     * const dns_servers = await prisma.dns_servers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends dns_serversCreateManyArgs>(args?: SelectSubset<T, dns_serversCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dns_servers and returns the data saved in the database.
     * @param {dns_serversCreateManyAndReturnArgs} args - Arguments to create many Dns_servers.
     * @example
     * // Create many Dns_servers
     * const dns_servers = await prisma.dns_servers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dns_servers and only return the `id`
     * const dns_serversWithIdOnly = await prisma.dns_servers.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends dns_serversCreateManyAndReturnArgs>(args?: SelectSubset<T, dns_serversCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Dns_servers.
     * @param {dns_serversDeleteArgs} args - Arguments to delete one Dns_servers.
     * @example
     * // Delete one Dns_servers
     * const Dns_servers = await prisma.dns_servers.delete({
     *   where: {
     *     // ... filter to delete one Dns_servers
     *   }
     * })
     * 
     */
    delete<T extends dns_serversDeleteArgs>(args: SelectSubset<T, dns_serversDeleteArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Dns_servers.
     * @param {dns_serversUpdateArgs} args - Arguments to update one Dns_servers.
     * @example
     * // Update one Dns_servers
     * const dns_servers = await prisma.dns_servers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends dns_serversUpdateArgs>(args: SelectSubset<T, dns_serversUpdateArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Dns_servers.
     * @param {dns_serversDeleteManyArgs} args - Arguments to filter Dns_servers to delete.
     * @example
     * // Delete a few Dns_servers
     * const { count } = await prisma.dns_servers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends dns_serversDeleteManyArgs>(args?: SelectSubset<T, dns_serversDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dns_servers
     * const dns_servers = await prisma.dns_servers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends dns_serversUpdateManyArgs>(args: SelectSubset<T, dns_serversUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dns_servers and returns the data updated in the database.
     * @param {dns_serversUpdateManyAndReturnArgs} args - Arguments to update many Dns_servers.
     * @example
     * // Update many Dns_servers
     * const dns_servers = await prisma.dns_servers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dns_servers and only return the `id`
     * const dns_serversWithIdOnly = await prisma.dns_servers.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends dns_serversUpdateManyAndReturnArgs>(args: SelectSubset<T, dns_serversUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Dns_servers.
     * @param {dns_serversUpsertArgs} args - Arguments to update or create a Dns_servers.
     * @example
     * // Update or create a Dns_servers
     * const dns_servers = await prisma.dns_servers.upsert({
     *   create: {
     *     // ... data to create a Dns_servers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dns_servers we want to update
     *   }
     * })
     */
    upsert<T extends dns_serversUpsertArgs>(args: SelectSubset<T, dns_serversUpsertArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversCountArgs} args - Arguments to filter Dns_servers to count.
     * @example
     * // Count the number of Dns_servers
     * const count = await prisma.dns_servers.count({
     *   where: {
     *     // ... the filter for the Dns_servers we want to count
     *   }
     * })
    **/
    count<T extends dns_serversCountArgs>(
      args?: Subset<T, dns_serversCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Dns_serversCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Dns_serversAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Dns_serversAggregateArgs>(args: Subset<T, Dns_serversAggregateArgs>): Prisma.PrismaPromise<GetDns_serversAggregateType<T>>

    /**
     * Group by Dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dns_serversGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dns_serversGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dns_serversGroupByArgs['orderBy'] }
        : { orderBy?: dns_serversGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dns_serversGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDns_serversGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dns_servers model
   */
  readonly fields: dns_serversFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dns_servers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dns_serversClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain_dns_server<T extends dns_servers$domain_dns_serverArgs<ExtArgs> = {}>(args?: Subset<T, dns_servers$domain_dns_serverArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the dns_servers model
   */ 
  interface dns_serversFieldRefs {
    readonly id: FieldRef<"dns_servers", 'Int'>
    readonly ip_address: FieldRef<"dns_servers", 'String'>
    readonly url: FieldRef<"dns_servers", 'String'>
    readonly created_at: FieldRef<"dns_servers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * dns_servers findUnique
   */
  export type dns_serversFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter, which dns_servers to fetch.
     */
    where: dns_serversWhereUniqueInput
  }

  /**
   * dns_servers findUniqueOrThrow
   */
  export type dns_serversFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter, which dns_servers to fetch.
     */
    where: dns_serversWhereUniqueInput
  }

  /**
   * dns_servers findFirst
   */
  export type dns_serversFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter, which dns_servers to fetch.
     */
    where?: dns_serversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dns_servers to fetch.
     */
    orderBy?: dns_serversOrderByWithRelationInput | dns_serversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dns_servers.
     */
    cursor?: dns_serversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dns_servers.
     */
    distinct?: Dns_serversScalarFieldEnum | Dns_serversScalarFieldEnum[]
  }

  /**
   * dns_servers findFirstOrThrow
   */
  export type dns_serversFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter, which dns_servers to fetch.
     */
    where?: dns_serversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dns_servers to fetch.
     */
    orderBy?: dns_serversOrderByWithRelationInput | dns_serversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dns_servers.
     */
    cursor?: dns_serversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dns_servers.
     */
    distinct?: Dns_serversScalarFieldEnum | Dns_serversScalarFieldEnum[]
  }

  /**
   * dns_servers findMany
   */
  export type dns_serversFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter, which dns_servers to fetch.
     */
    where?: dns_serversWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dns_servers to fetch.
     */
    orderBy?: dns_serversOrderByWithRelationInput | dns_serversOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dns_servers.
     */
    cursor?: dns_serversWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dns_servers.
     */
    skip?: number
    distinct?: Dns_serversScalarFieldEnum | Dns_serversScalarFieldEnum[]
  }

  /**
   * dns_servers create
   */
  export type dns_serversCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * The data needed to create a dns_servers.
     */
    data: XOR<dns_serversCreateInput, dns_serversUncheckedCreateInput>
  }

  /**
   * dns_servers createMany
   */
  export type dns_serversCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dns_servers.
     */
    data: dns_serversCreateManyInput | dns_serversCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dns_servers createManyAndReturn
   */
  export type dns_serversCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * The data used to create many dns_servers.
     */
    data: dns_serversCreateManyInput | dns_serversCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dns_servers update
   */
  export type dns_serversUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * The data needed to update a dns_servers.
     */
    data: XOR<dns_serversUpdateInput, dns_serversUncheckedUpdateInput>
    /**
     * Choose, which dns_servers to update.
     */
    where: dns_serversWhereUniqueInput
  }

  /**
   * dns_servers updateMany
   */
  export type dns_serversUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dns_servers.
     */
    data: XOR<dns_serversUpdateManyMutationInput, dns_serversUncheckedUpdateManyInput>
    /**
     * Filter which dns_servers to update
     */
    where?: dns_serversWhereInput
    /**
     * Limit how many dns_servers to update.
     */
    limit?: number
  }

  /**
   * dns_servers updateManyAndReturn
   */
  export type dns_serversUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * The data used to update dns_servers.
     */
    data: XOR<dns_serversUpdateManyMutationInput, dns_serversUncheckedUpdateManyInput>
    /**
     * Filter which dns_servers to update
     */
    where?: dns_serversWhereInput
    /**
     * Limit how many dns_servers to update.
     */
    limit?: number
  }

  /**
   * dns_servers upsert
   */
  export type dns_serversUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * The filter to search for the dns_servers to update in case it exists.
     */
    where: dns_serversWhereUniqueInput
    /**
     * In case the dns_servers found by the `where` argument doesn't exist, create a new dns_servers with this data.
     */
    create: XOR<dns_serversCreateInput, dns_serversUncheckedCreateInput>
    /**
     * In case the dns_servers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dns_serversUpdateInput, dns_serversUncheckedUpdateInput>
  }

  /**
   * dns_servers delete
   */
  export type dns_serversDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
    /**
     * Filter which dns_servers to delete.
     */
    where: dns_serversWhereUniqueInput
  }

  /**
   * dns_servers deleteMany
   */
  export type dns_serversDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dns_servers to delete
     */
    where?: dns_serversWhereInput
    /**
     * Limit how many dns_servers to delete.
     */
    limit?: number
  }

  /**
   * dns_servers.domain_dns_server
   */
  export type dns_servers$domain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    where?: domain_dns_serverWhereInput
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    cursor?: domain_dns_serverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * dns_servers without action
   */
  export type dns_serversDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dns_servers
     */
    select?: dns_serversSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dns_servers
     */
    omit?: dns_serversOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dns_serversInclude<ExtArgs> | null
  }


  /**
   * Model domain_dns_server
   */

  export type AggregateDomain_dns_server = {
    _count: Domain_dns_serverCountAggregateOutputType | null
    _avg: Domain_dns_serverAvgAggregateOutputType | null
    _sum: Domain_dns_serverSumAggregateOutputType | null
    _min: Domain_dns_serverMinAggregateOutputType | null
    _max: Domain_dns_serverMaxAggregateOutputType | null
  }

  export type Domain_dns_serverAvgAggregateOutputType = {
    domain_id: number | null
    dns_server_id: number | null
    status_id: number | null
  }

  export type Domain_dns_serverSumAggregateOutputType = {
    domain_id: number | null
    dns_server_id: number | null
    status_id: number | null
  }

  export type Domain_dns_serverMinAggregateOutputType = {
    domain_id: number | null
    dns_server_id: number | null
    status_id: number | null
    created_at: Date | null
  }

  export type Domain_dns_serverMaxAggregateOutputType = {
    domain_id: number | null
    dns_server_id: number | null
    status_id: number | null
    created_at: Date | null
  }

  export type Domain_dns_serverCountAggregateOutputType = {
    domain_id: number
    dns_server_id: number
    status_id: number
    created_at: number
    _all: number
  }


  export type Domain_dns_serverAvgAggregateInputType = {
    domain_id?: true
    dns_server_id?: true
    status_id?: true
  }

  export type Domain_dns_serverSumAggregateInputType = {
    domain_id?: true
    dns_server_id?: true
    status_id?: true
  }

  export type Domain_dns_serverMinAggregateInputType = {
    domain_id?: true
    dns_server_id?: true
    status_id?: true
    created_at?: true
  }

  export type Domain_dns_serverMaxAggregateInputType = {
    domain_id?: true
    dns_server_id?: true
    status_id?: true
    created_at?: true
  }

  export type Domain_dns_serverCountAggregateInputType = {
    domain_id?: true
    dns_server_id?: true
    status_id?: true
    created_at?: true
    _all?: true
  }

  export type Domain_dns_serverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which domain_dns_server to aggregate.
     */
    where?: domain_dns_serverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domain_dns_servers to fetch.
     */
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: domain_dns_serverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domain_dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domain_dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned domain_dns_servers
    **/
    _count?: true | Domain_dns_serverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Domain_dns_serverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Domain_dns_serverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Domain_dns_serverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Domain_dns_serverMaxAggregateInputType
  }

  export type GetDomain_dns_serverAggregateType<T extends Domain_dns_serverAggregateArgs> = {
        [P in keyof T & keyof AggregateDomain_dns_server]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomain_dns_server[P]>
      : GetScalarType<T[P], AggregateDomain_dns_server[P]>
  }




  export type domain_dns_serverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domain_dns_serverWhereInput
    orderBy?: domain_dns_serverOrderByWithAggregationInput | domain_dns_serverOrderByWithAggregationInput[]
    by: Domain_dns_serverScalarFieldEnum[] | Domain_dns_serverScalarFieldEnum
    having?: domain_dns_serverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Domain_dns_serverCountAggregateInputType | true
    _avg?: Domain_dns_serverAvgAggregateInputType
    _sum?: Domain_dns_serverSumAggregateInputType
    _min?: Domain_dns_serverMinAggregateInputType
    _max?: Domain_dns_serverMaxAggregateInputType
  }

  export type Domain_dns_serverGroupByOutputType = {
    domain_id: number
    dns_server_id: number
    status_id: number
    created_at: Date | null
    _count: Domain_dns_serverCountAggregateOutputType | null
    _avg: Domain_dns_serverAvgAggregateOutputType | null
    _sum: Domain_dns_serverSumAggregateOutputType | null
    _min: Domain_dns_serverMinAggregateOutputType | null
    _max: Domain_dns_serverMaxAggregateOutputType | null
  }

  type GetDomain_dns_serverGroupByPayload<T extends domain_dns_serverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Domain_dns_serverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Domain_dns_serverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Domain_dns_serverGroupByOutputType[P]>
            : GetScalarType<T[P], Domain_dns_serverGroupByOutputType[P]>
        }
      >
    >


  export type domain_dns_serverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    domain_id?: boolean
    dns_server_id?: boolean
    status_id?: boolean
    created_at?: boolean
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain_dns_server"]>

  export type domain_dns_serverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    domain_id?: boolean
    dns_server_id?: boolean
    status_id?: boolean
    created_at?: boolean
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain_dns_server"]>

  export type domain_dns_serverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    domain_id?: boolean
    dns_server_id?: boolean
    status_id?: boolean
    created_at?: boolean
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain_dns_server"]>

  export type domain_dns_serverSelectScalar = {
    domain_id?: boolean
    dns_server_id?: boolean
    status_id?: boolean
    created_at?: boolean
  }

  export type domain_dns_serverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"domain_id" | "dns_server_id" | "status_id" | "created_at", ExtArgs["result"]["domain_dns_server"]>
  export type domain_dns_serverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }
  export type domain_dns_serverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }
  export type domain_dns_serverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dns_servers?: boolean | dns_serversDefaultArgs<ExtArgs>
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    status?: boolean | statusDefaultArgs<ExtArgs>
  }

  export type $domain_dns_serverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "domain_dns_server"
    objects: {
      dns_servers: Prisma.$dns_serversPayload<ExtArgs>
      domains: Prisma.$domainsPayload<ExtArgs>
      status: Prisma.$statusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      domain_id: number
      dns_server_id: number
      status_id: number
      created_at: Date | null
    }, ExtArgs["result"]["domain_dns_server"]>
    composites: {}
  }

  type domain_dns_serverGetPayload<S extends boolean | null | undefined | domain_dns_serverDefaultArgs> = $Result.GetResult<Prisma.$domain_dns_serverPayload, S>

  type domain_dns_serverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<domain_dns_serverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Domain_dns_serverCountAggregateInputType | true
    }

  export interface domain_dns_serverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['domain_dns_server'], meta: { name: 'domain_dns_server' } }
    /**
     * Find zero or one Domain_dns_server that matches the filter.
     * @param {domain_dns_serverFindUniqueArgs} args - Arguments to find a Domain_dns_server
     * @example
     * // Get one Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends domain_dns_serverFindUniqueArgs>(args: SelectSubset<T, domain_dns_serverFindUniqueArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Domain_dns_server that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {domain_dns_serverFindUniqueOrThrowArgs} args - Arguments to find a Domain_dns_server
     * @example
     * // Get one Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends domain_dns_serverFindUniqueOrThrowArgs>(args: SelectSubset<T, domain_dns_serverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Domain_dns_server that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverFindFirstArgs} args - Arguments to find a Domain_dns_server
     * @example
     * // Get one Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends domain_dns_serverFindFirstArgs>(args?: SelectSubset<T, domain_dns_serverFindFirstArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Domain_dns_server that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverFindFirstOrThrowArgs} args - Arguments to find a Domain_dns_server
     * @example
     * // Get one Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends domain_dns_serverFindFirstOrThrowArgs>(args?: SelectSubset<T, domain_dns_serverFindFirstOrThrowArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Domain_dns_servers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domain_dns_servers
     * const domain_dns_servers = await prisma.domain_dns_server.findMany()
     * 
     * // Get first 10 Domain_dns_servers
     * const domain_dns_servers = await prisma.domain_dns_server.findMany({ take: 10 })
     * 
     * // Only select the `domain_id`
     * const domain_dns_serverWithDomain_idOnly = await prisma.domain_dns_server.findMany({ select: { domain_id: true } })
     * 
     */
    findMany<T extends domain_dns_serverFindManyArgs>(args?: SelectSubset<T, domain_dns_serverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Domain_dns_server.
     * @param {domain_dns_serverCreateArgs} args - Arguments to create a Domain_dns_server.
     * @example
     * // Create one Domain_dns_server
     * const Domain_dns_server = await prisma.domain_dns_server.create({
     *   data: {
     *     // ... data to create a Domain_dns_server
     *   }
     * })
     * 
     */
    create<T extends domain_dns_serverCreateArgs>(args: SelectSubset<T, domain_dns_serverCreateArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Domain_dns_servers.
     * @param {domain_dns_serverCreateManyArgs} args - Arguments to create many Domain_dns_servers.
     * @example
     * // Create many Domain_dns_servers
     * const domain_dns_server = await prisma.domain_dns_server.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends domain_dns_serverCreateManyArgs>(args?: SelectSubset<T, domain_dns_serverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Domain_dns_servers and returns the data saved in the database.
     * @param {domain_dns_serverCreateManyAndReturnArgs} args - Arguments to create many Domain_dns_servers.
     * @example
     * // Create many Domain_dns_servers
     * const domain_dns_server = await prisma.domain_dns_server.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Domain_dns_servers and only return the `domain_id`
     * const domain_dns_serverWithDomain_idOnly = await prisma.domain_dns_server.createManyAndReturn({
     *   select: { domain_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends domain_dns_serverCreateManyAndReturnArgs>(args?: SelectSubset<T, domain_dns_serverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Domain_dns_server.
     * @param {domain_dns_serverDeleteArgs} args - Arguments to delete one Domain_dns_server.
     * @example
     * // Delete one Domain_dns_server
     * const Domain_dns_server = await prisma.domain_dns_server.delete({
     *   where: {
     *     // ... filter to delete one Domain_dns_server
     *   }
     * })
     * 
     */
    delete<T extends domain_dns_serverDeleteArgs>(args: SelectSubset<T, domain_dns_serverDeleteArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Domain_dns_server.
     * @param {domain_dns_serverUpdateArgs} args - Arguments to update one Domain_dns_server.
     * @example
     * // Update one Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends domain_dns_serverUpdateArgs>(args: SelectSubset<T, domain_dns_serverUpdateArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Domain_dns_servers.
     * @param {domain_dns_serverDeleteManyArgs} args - Arguments to filter Domain_dns_servers to delete.
     * @example
     * // Delete a few Domain_dns_servers
     * const { count } = await prisma.domain_dns_server.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends domain_dns_serverDeleteManyArgs>(args?: SelectSubset<T, domain_dns_serverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domain_dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domain_dns_servers
     * const domain_dns_server = await prisma.domain_dns_server.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends domain_dns_serverUpdateManyArgs>(args: SelectSubset<T, domain_dns_serverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domain_dns_servers and returns the data updated in the database.
     * @param {domain_dns_serverUpdateManyAndReturnArgs} args - Arguments to update many Domain_dns_servers.
     * @example
     * // Update many Domain_dns_servers
     * const domain_dns_server = await prisma.domain_dns_server.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Domain_dns_servers and only return the `domain_id`
     * const domain_dns_serverWithDomain_idOnly = await prisma.domain_dns_server.updateManyAndReturn({
     *   select: { domain_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends domain_dns_serverUpdateManyAndReturnArgs>(args: SelectSubset<T, domain_dns_serverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Domain_dns_server.
     * @param {domain_dns_serverUpsertArgs} args - Arguments to update or create a Domain_dns_server.
     * @example
     * // Update or create a Domain_dns_server
     * const domain_dns_server = await prisma.domain_dns_server.upsert({
     *   create: {
     *     // ... data to create a Domain_dns_server
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domain_dns_server we want to update
     *   }
     * })
     */
    upsert<T extends domain_dns_serverUpsertArgs>(args: SelectSubset<T, domain_dns_serverUpsertArgs<ExtArgs>>): Prisma__domain_dns_serverClient<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Domain_dns_servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverCountArgs} args - Arguments to filter Domain_dns_servers to count.
     * @example
     * // Count the number of Domain_dns_servers
     * const count = await prisma.domain_dns_server.count({
     *   where: {
     *     // ... the filter for the Domain_dns_servers we want to count
     *   }
     * })
    **/
    count<T extends domain_dns_serverCountArgs>(
      args?: Subset<T, domain_dns_serverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Domain_dns_serverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domain_dns_server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Domain_dns_serverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Domain_dns_serverAggregateArgs>(args: Subset<T, Domain_dns_serverAggregateArgs>): Prisma.PrismaPromise<GetDomain_dns_serverAggregateType<T>>

    /**
     * Group by Domain_dns_server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domain_dns_serverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends domain_dns_serverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: domain_dns_serverGroupByArgs['orderBy'] }
        : { orderBy?: domain_dns_serverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, domain_dns_serverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomain_dns_serverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the domain_dns_server model
   */
  readonly fields: domain_dns_serverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for domain_dns_server.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__domain_dns_serverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dns_servers<T extends dns_serversDefaultArgs<ExtArgs> = {}>(args?: Subset<T, dns_serversDefaultArgs<ExtArgs>>): Prisma__dns_serversClient<$Result.GetResult<Prisma.$dns_serversPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    domains<T extends domainsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, domainsDefaultArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    status<T extends statusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusDefaultArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the domain_dns_server model
   */ 
  interface domain_dns_serverFieldRefs {
    readonly domain_id: FieldRef<"domain_dns_server", 'Int'>
    readonly dns_server_id: FieldRef<"domain_dns_server", 'Int'>
    readonly status_id: FieldRef<"domain_dns_server", 'Int'>
    readonly created_at: FieldRef<"domain_dns_server", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * domain_dns_server findUnique
   */
  export type domain_dns_serverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter, which domain_dns_server to fetch.
     */
    where: domain_dns_serverWhereUniqueInput
  }

  /**
   * domain_dns_server findUniqueOrThrow
   */
  export type domain_dns_serverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter, which domain_dns_server to fetch.
     */
    where: domain_dns_serverWhereUniqueInput
  }

  /**
   * domain_dns_server findFirst
   */
  export type domain_dns_serverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter, which domain_dns_server to fetch.
     */
    where?: domain_dns_serverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domain_dns_servers to fetch.
     */
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for domain_dns_servers.
     */
    cursor?: domain_dns_serverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domain_dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domain_dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of domain_dns_servers.
     */
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * domain_dns_server findFirstOrThrow
   */
  export type domain_dns_serverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter, which domain_dns_server to fetch.
     */
    where?: domain_dns_serverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domain_dns_servers to fetch.
     */
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for domain_dns_servers.
     */
    cursor?: domain_dns_serverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domain_dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domain_dns_servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of domain_dns_servers.
     */
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * domain_dns_server findMany
   */
  export type domain_dns_serverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter, which domain_dns_servers to fetch.
     */
    where?: domain_dns_serverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domain_dns_servers to fetch.
     */
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing domain_dns_servers.
     */
    cursor?: domain_dns_serverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domain_dns_servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domain_dns_servers.
     */
    skip?: number
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * domain_dns_server create
   */
  export type domain_dns_serverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * The data needed to create a domain_dns_server.
     */
    data: XOR<domain_dns_serverCreateInput, domain_dns_serverUncheckedCreateInput>
  }

  /**
   * domain_dns_server createMany
   */
  export type domain_dns_serverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many domain_dns_servers.
     */
    data: domain_dns_serverCreateManyInput | domain_dns_serverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * domain_dns_server createManyAndReturn
   */
  export type domain_dns_serverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * The data used to create many domain_dns_servers.
     */
    data: domain_dns_serverCreateManyInput | domain_dns_serverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * domain_dns_server update
   */
  export type domain_dns_serverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * The data needed to update a domain_dns_server.
     */
    data: XOR<domain_dns_serverUpdateInput, domain_dns_serverUncheckedUpdateInput>
    /**
     * Choose, which domain_dns_server to update.
     */
    where: domain_dns_serverWhereUniqueInput
  }

  /**
   * domain_dns_server updateMany
   */
  export type domain_dns_serverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update domain_dns_servers.
     */
    data: XOR<domain_dns_serverUpdateManyMutationInput, domain_dns_serverUncheckedUpdateManyInput>
    /**
     * Filter which domain_dns_servers to update
     */
    where?: domain_dns_serverWhereInput
    /**
     * Limit how many domain_dns_servers to update.
     */
    limit?: number
  }

  /**
   * domain_dns_server updateManyAndReturn
   */
  export type domain_dns_serverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * The data used to update domain_dns_servers.
     */
    data: XOR<domain_dns_serverUpdateManyMutationInput, domain_dns_serverUncheckedUpdateManyInput>
    /**
     * Filter which domain_dns_servers to update
     */
    where?: domain_dns_serverWhereInput
    /**
     * Limit how many domain_dns_servers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * domain_dns_server upsert
   */
  export type domain_dns_serverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * The filter to search for the domain_dns_server to update in case it exists.
     */
    where: domain_dns_serverWhereUniqueInput
    /**
     * In case the domain_dns_server found by the `where` argument doesn't exist, create a new domain_dns_server with this data.
     */
    create: XOR<domain_dns_serverCreateInput, domain_dns_serverUncheckedCreateInput>
    /**
     * In case the domain_dns_server was found with the provided `where` argument, update it with this data.
     */
    update: XOR<domain_dns_serverUpdateInput, domain_dns_serverUncheckedUpdateInput>
  }

  /**
   * domain_dns_server delete
   */
  export type domain_dns_serverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    /**
     * Filter which domain_dns_server to delete.
     */
    where: domain_dns_serverWhereUniqueInput
  }

  /**
   * domain_dns_server deleteMany
   */
  export type domain_dns_serverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which domain_dns_servers to delete
     */
    where?: domain_dns_serverWhereInput
    /**
     * Limit how many domain_dns_servers to delete.
     */
    limit?: number
  }

  /**
   * domain_dns_server without action
   */
  export type domain_dns_serverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
  }


  /**
   * Model domains
   */

  export type AggregateDomains = {
    _count: DomainsCountAggregateOutputType | null
    _avg: DomainsAvgAggregateOutputType | null
    _sum: DomainsSumAggregateOutputType | null
    _min: DomainsMinAggregateOutputType | null
    _max: DomainsMaxAggregateOutputType | null
  }

  export type DomainsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DomainsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DomainsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    name: string | null
    created_at: Date | null
  }

  export type DomainsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    name: string | null
    created_at: Date | null
  }

  export type DomainsCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    created_at: number
    _all: number
  }


  export type DomainsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DomainsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DomainsMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    created_at?: true
  }

  export type DomainsMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    created_at?: true
  }

  export type DomainsCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type DomainsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which domains to aggregate.
     */
    where?: domainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domains to fetch.
     */
    orderBy?: domainsOrderByWithRelationInput | domainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: domainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned domains
    **/
    _count?: true | DomainsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DomainsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DomainsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DomainsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DomainsMaxAggregateInputType
  }

  export type GetDomainsAggregateType<T extends DomainsAggregateArgs> = {
        [P in keyof T & keyof AggregateDomains]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomains[P]>
      : GetScalarType<T[P], AggregateDomains[P]>
  }




  export type domainsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: domainsWhereInput
    orderBy?: domainsOrderByWithAggregationInput | domainsOrderByWithAggregationInput[]
    by: DomainsScalarFieldEnum[] | DomainsScalarFieldEnum
    having?: domainsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DomainsCountAggregateInputType | true
    _avg?: DomainsAvgAggregateInputType
    _sum?: DomainsSumAggregateInputType
    _min?: DomainsMinAggregateInputType
    _max?: DomainsMaxAggregateInputType
  }

  export type DomainsGroupByOutputType = {
    id: number
    user_id: number
    name: string
    created_at: Date | null
    _count: DomainsCountAggregateOutputType | null
    _avg: DomainsAvgAggregateOutputType | null
    _sum: DomainsSumAggregateOutputType | null
    _min: DomainsMinAggregateOutputType | null
    _max: DomainsMaxAggregateOutputType | null
  }

  type GetDomainsGroupByPayload<T extends domainsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DomainsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DomainsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DomainsGroupByOutputType[P]>
            : GetScalarType<T[P], DomainsGroupByOutputType[P]>
        }
      >
    >


  export type domainsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    created_at?: boolean
    domain_dns_server?: boolean | domains$domain_dns_serverArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    records?: boolean | domains$recordsArgs<ExtArgs>
    _count?: boolean | DomainsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domains"]>

  export type domainsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domains"]>

  export type domainsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    created_at?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domains"]>

  export type domainsSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    created_at?: boolean
  }

  export type domainsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "created_at", ExtArgs["result"]["domains"]>
  export type domainsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | domains$domain_dns_serverArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    records?: boolean | domains$recordsArgs<ExtArgs>
    _count?: boolean | DomainsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type domainsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type domainsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $domainsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "domains"
    objects: {
      domain_dns_server: Prisma.$domain_dns_serverPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>
      records: Prisma.$recordsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      name: string
      created_at: Date | null
    }, ExtArgs["result"]["domains"]>
    composites: {}
  }

  type domainsGetPayload<S extends boolean | null | undefined | domainsDefaultArgs> = $Result.GetResult<Prisma.$domainsPayload, S>

  type domainsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<domainsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DomainsCountAggregateInputType | true
    }

  export interface domainsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['domains'], meta: { name: 'domains' } }
    /**
     * Find zero or one Domains that matches the filter.
     * @param {domainsFindUniqueArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends domainsFindUniqueArgs>(args: SelectSubset<T, domainsFindUniqueArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Domains that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {domainsFindUniqueOrThrowArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends domainsFindUniqueOrThrowArgs>(args: SelectSubset<T, domainsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsFindFirstArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends domainsFindFirstArgs>(args?: SelectSubset<T, domainsFindFirstArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Domains that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsFindFirstOrThrowArgs} args - Arguments to find a Domains
     * @example
     * // Get one Domains
     * const domains = await prisma.domains.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends domainsFindFirstOrThrowArgs>(args?: SelectSubset<T, domainsFindFirstOrThrowArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domains
     * const domains = await prisma.domains.findMany()
     * 
     * // Get first 10 Domains
     * const domains = await prisma.domains.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const domainsWithIdOnly = await prisma.domains.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends domainsFindManyArgs>(args?: SelectSubset<T, domainsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Domains.
     * @param {domainsCreateArgs} args - Arguments to create a Domains.
     * @example
     * // Create one Domains
     * const Domains = await prisma.domains.create({
     *   data: {
     *     // ... data to create a Domains
     *   }
     * })
     * 
     */
    create<T extends domainsCreateArgs>(args: SelectSubset<T, domainsCreateArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Domains.
     * @param {domainsCreateManyArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domains = await prisma.domains.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends domainsCreateManyArgs>(args?: SelectSubset<T, domainsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Domains and returns the data saved in the database.
     * @param {domainsCreateManyAndReturnArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domains = await prisma.domains.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Domains and only return the `id`
     * const domainsWithIdOnly = await prisma.domains.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends domainsCreateManyAndReturnArgs>(args?: SelectSubset<T, domainsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Domains.
     * @param {domainsDeleteArgs} args - Arguments to delete one Domains.
     * @example
     * // Delete one Domains
     * const Domains = await prisma.domains.delete({
     *   where: {
     *     // ... filter to delete one Domains
     *   }
     * })
     * 
     */
    delete<T extends domainsDeleteArgs>(args: SelectSubset<T, domainsDeleteArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Domains.
     * @param {domainsUpdateArgs} args - Arguments to update one Domains.
     * @example
     * // Update one Domains
     * const domains = await prisma.domains.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends domainsUpdateArgs>(args: SelectSubset<T, domainsUpdateArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Domains.
     * @param {domainsDeleteManyArgs} args - Arguments to filter Domains to delete.
     * @example
     * // Delete a few Domains
     * const { count } = await prisma.domains.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends domainsDeleteManyArgs>(args?: SelectSubset<T, domainsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domains
     * const domains = await prisma.domains.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends domainsUpdateManyArgs>(args: SelectSubset<T, domainsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains and returns the data updated in the database.
     * @param {domainsUpdateManyAndReturnArgs} args - Arguments to update many Domains.
     * @example
     * // Update many Domains
     * const domains = await prisma.domains.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Domains and only return the `id`
     * const domainsWithIdOnly = await prisma.domains.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends domainsUpdateManyAndReturnArgs>(args: SelectSubset<T, domainsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Domains.
     * @param {domainsUpsertArgs} args - Arguments to update or create a Domains.
     * @example
     * // Update or create a Domains
     * const domains = await prisma.domains.upsert({
     *   create: {
     *     // ... data to create a Domains
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domains we want to update
     *   }
     * })
     */
    upsert<T extends domainsUpsertArgs>(args: SelectSubset<T, domainsUpsertArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsCountArgs} args - Arguments to filter Domains to count.
     * @example
     * // Count the number of Domains
     * const count = await prisma.domains.count({
     *   where: {
     *     // ... the filter for the Domains we want to count
     *   }
     * })
    **/
    count<T extends domainsCountArgs>(
      args?: Subset<T, domainsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DomainsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DomainsAggregateArgs>(args: Subset<T, DomainsAggregateArgs>): Prisma.PrismaPromise<GetDomainsAggregateType<T>>

    /**
     * Group by Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {domainsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends domainsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: domainsGroupByArgs['orderBy'] }
        : { orderBy?: domainsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, domainsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomainsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the domains model
   */
  readonly fields: domainsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for domains.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__domainsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain_dns_server<T extends domains$domain_dns_serverArgs<ExtArgs> = {}>(args?: Subset<T, domains$domain_dns_serverArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    records<T extends domains$recordsArgs<ExtArgs> = {}>(args?: Subset<T, domains$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the domains model
   */ 
  interface domainsFieldRefs {
    readonly id: FieldRef<"domains", 'Int'>
    readonly user_id: FieldRef<"domains", 'Int'>
    readonly name: FieldRef<"domains", 'String'>
    readonly created_at: FieldRef<"domains", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * domains findUnique
   */
  export type domainsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter, which domains to fetch.
     */
    where: domainsWhereUniqueInput
  }

  /**
   * domains findUniqueOrThrow
   */
  export type domainsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter, which domains to fetch.
     */
    where: domainsWhereUniqueInput
  }

  /**
   * domains findFirst
   */
  export type domainsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter, which domains to fetch.
     */
    where?: domainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domains to fetch.
     */
    orderBy?: domainsOrderByWithRelationInput | domainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for domains.
     */
    cursor?: domainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of domains.
     */
    distinct?: DomainsScalarFieldEnum | DomainsScalarFieldEnum[]
  }

  /**
   * domains findFirstOrThrow
   */
  export type domainsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter, which domains to fetch.
     */
    where?: domainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domains to fetch.
     */
    orderBy?: domainsOrderByWithRelationInput | domainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for domains.
     */
    cursor?: domainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of domains.
     */
    distinct?: DomainsScalarFieldEnum | DomainsScalarFieldEnum[]
  }

  /**
   * domains findMany
   */
  export type domainsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter, which domains to fetch.
     */
    where?: domainsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of domains to fetch.
     */
    orderBy?: domainsOrderByWithRelationInput | domainsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing domains.
     */
    cursor?: domainsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` domains.
     */
    skip?: number
    distinct?: DomainsScalarFieldEnum | DomainsScalarFieldEnum[]
  }

  /**
   * domains create
   */
  export type domainsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * The data needed to create a domains.
     */
    data: XOR<domainsCreateInput, domainsUncheckedCreateInput>
  }

  /**
   * domains createMany
   */
  export type domainsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many domains.
     */
    data: domainsCreateManyInput | domainsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * domains createManyAndReturn
   */
  export type domainsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * The data used to create many domains.
     */
    data: domainsCreateManyInput | domainsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * domains update
   */
  export type domainsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * The data needed to update a domains.
     */
    data: XOR<domainsUpdateInput, domainsUncheckedUpdateInput>
    /**
     * Choose, which domains to update.
     */
    where: domainsWhereUniqueInput
  }

  /**
   * domains updateMany
   */
  export type domainsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update domains.
     */
    data: XOR<domainsUpdateManyMutationInput, domainsUncheckedUpdateManyInput>
    /**
     * Filter which domains to update
     */
    where?: domainsWhereInput
    /**
     * Limit how many domains to update.
     */
    limit?: number
  }

  /**
   * domains updateManyAndReturn
   */
  export type domainsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * The data used to update domains.
     */
    data: XOR<domainsUpdateManyMutationInput, domainsUncheckedUpdateManyInput>
    /**
     * Filter which domains to update
     */
    where?: domainsWhereInput
    /**
     * Limit how many domains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * domains upsert
   */
  export type domainsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * The filter to search for the domains to update in case it exists.
     */
    where: domainsWhereUniqueInput
    /**
     * In case the domains found by the `where` argument doesn't exist, create a new domains with this data.
     */
    create: XOR<domainsCreateInput, domainsUncheckedCreateInput>
    /**
     * In case the domains was found with the provided `where` argument, update it with this data.
     */
    update: XOR<domainsUpdateInput, domainsUncheckedUpdateInput>
  }

  /**
   * domains delete
   */
  export type domainsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    /**
     * Filter which domains to delete.
     */
    where: domainsWhereUniqueInput
  }

  /**
   * domains deleteMany
   */
  export type domainsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which domains to delete
     */
    where?: domainsWhereInput
    /**
     * Limit how many domains to delete.
     */
    limit?: number
  }

  /**
   * domains.domain_dns_server
   */
  export type domains$domain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    where?: domain_dns_serverWhereInput
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    cursor?: domain_dns_serverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * domains.records
   */
  export type domains$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    where?: recordsWhereInput
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    cursor?: recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * domains without action
   */
  export type domainsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
  }


  /**
   * Model record_type
   */

  export type AggregateRecord_type = {
    _count: Record_typeCountAggregateOutputType | null
    _avg: Record_typeAvgAggregateOutputType | null
    _sum: Record_typeSumAggregateOutputType | null
    _min: Record_typeMinAggregateOutputType | null
    _max: Record_typeMaxAggregateOutputType | null
  }

  export type Record_typeAvgAggregateOutputType = {
    id: number | null
  }

  export type Record_typeSumAggregateOutputType = {
    id: number | null
  }

  export type Record_typeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Record_typeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Record_typeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Record_typeAvgAggregateInputType = {
    id?: true
  }

  export type Record_typeSumAggregateInputType = {
    id?: true
  }

  export type Record_typeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Record_typeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Record_typeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Record_typeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which record_type to aggregate.
     */
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     */
    orderBy?: record_typeOrderByWithRelationInput | record_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned record_types
    **/
    _count?: true | Record_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Record_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Record_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Record_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Record_typeMaxAggregateInputType
  }

  export type GetRecord_typeAggregateType<T extends Record_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord_type[P]>
      : GetScalarType<T[P], AggregateRecord_type[P]>
  }




  export type record_typeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: record_typeWhereInput
    orderBy?: record_typeOrderByWithAggregationInput | record_typeOrderByWithAggregationInput[]
    by: Record_typeScalarFieldEnum[] | Record_typeScalarFieldEnum
    having?: record_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Record_typeCountAggregateInputType | true
    _avg?: Record_typeAvgAggregateInputType
    _sum?: Record_typeSumAggregateInputType
    _min?: Record_typeMinAggregateInputType
    _max?: Record_typeMaxAggregateInputType
  }

  export type Record_typeGroupByOutputType = {
    id: number
    name: string
    _count: Record_typeCountAggregateOutputType | null
    _avg: Record_typeAvgAggregateOutputType | null
    _sum: Record_typeSumAggregateOutputType | null
    _min: Record_typeMinAggregateOutputType | null
    _max: Record_typeMaxAggregateOutputType | null
  }

  type GetRecord_typeGroupByPayload<T extends record_typeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Record_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Record_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Record_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Record_typeGroupByOutputType[P]>
        }
      >
    >


  export type record_typeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    records?: boolean | record_type$recordsArgs<ExtArgs>
    _count?: boolean | Record_typeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["record_type"]>

  export type record_typeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["record_type"]>

  export type record_typeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["record_type"]>

  export type record_typeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type record_typeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["record_type"]>
  export type record_typeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | record_type$recordsArgs<ExtArgs>
    _count?: boolean | Record_typeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type record_typeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type record_typeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $record_typePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "record_type"
    objects: {
      records: Prisma.$recordsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["record_type"]>
    composites: {}
  }

  type record_typeGetPayload<S extends boolean | null | undefined | record_typeDefaultArgs> = $Result.GetResult<Prisma.$record_typePayload, S>

  type record_typeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<record_typeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Record_typeCountAggregateInputType | true
    }

  export interface record_typeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['record_type'], meta: { name: 'record_type' } }
    /**
     * Find zero or one Record_type that matches the filter.
     * @param {record_typeFindUniqueArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends record_typeFindUniqueArgs>(args: SelectSubset<T, record_typeFindUniqueArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Record_type that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {record_typeFindUniqueOrThrowArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends record_typeFindUniqueOrThrowArgs>(args: SelectSubset<T, record_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Record_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeFindFirstArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends record_typeFindFirstArgs>(args?: SelectSubset<T, record_typeFindFirstArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Record_type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeFindFirstOrThrowArgs} args - Arguments to find a Record_type
     * @example
     * // Get one Record_type
     * const record_type = await prisma.record_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends record_typeFindFirstOrThrowArgs>(args?: SelectSubset<T, record_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Record_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Record_types
     * const record_types = await prisma.record_type.findMany()
     * 
     * // Get first 10 Record_types
     * const record_types = await prisma.record_type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const record_typeWithIdOnly = await prisma.record_type.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends record_typeFindManyArgs>(args?: SelectSubset<T, record_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Record_type.
     * @param {record_typeCreateArgs} args - Arguments to create a Record_type.
     * @example
     * // Create one Record_type
     * const Record_type = await prisma.record_type.create({
     *   data: {
     *     // ... data to create a Record_type
     *   }
     * })
     * 
     */
    create<T extends record_typeCreateArgs>(args: SelectSubset<T, record_typeCreateArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Record_types.
     * @param {record_typeCreateManyArgs} args - Arguments to create many Record_types.
     * @example
     * // Create many Record_types
     * const record_type = await prisma.record_type.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends record_typeCreateManyArgs>(args?: SelectSubset<T, record_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Record_types and returns the data saved in the database.
     * @param {record_typeCreateManyAndReturnArgs} args - Arguments to create many Record_types.
     * @example
     * // Create many Record_types
     * const record_type = await prisma.record_type.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Record_types and only return the `id`
     * const record_typeWithIdOnly = await prisma.record_type.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends record_typeCreateManyAndReturnArgs>(args?: SelectSubset<T, record_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Record_type.
     * @param {record_typeDeleteArgs} args - Arguments to delete one Record_type.
     * @example
     * // Delete one Record_type
     * const Record_type = await prisma.record_type.delete({
     *   where: {
     *     // ... filter to delete one Record_type
     *   }
     * })
     * 
     */
    delete<T extends record_typeDeleteArgs>(args: SelectSubset<T, record_typeDeleteArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Record_type.
     * @param {record_typeUpdateArgs} args - Arguments to update one Record_type.
     * @example
     * // Update one Record_type
     * const record_type = await prisma.record_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends record_typeUpdateArgs>(args: SelectSubset<T, record_typeUpdateArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Record_types.
     * @param {record_typeDeleteManyArgs} args - Arguments to filter Record_types to delete.
     * @example
     * // Delete a few Record_types
     * const { count } = await prisma.record_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends record_typeDeleteManyArgs>(args?: SelectSubset<T, record_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Record_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Record_types
     * const record_type = await prisma.record_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends record_typeUpdateManyArgs>(args: SelectSubset<T, record_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Record_types and returns the data updated in the database.
     * @param {record_typeUpdateManyAndReturnArgs} args - Arguments to update many Record_types.
     * @example
     * // Update many Record_types
     * const record_type = await prisma.record_type.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Record_types and only return the `id`
     * const record_typeWithIdOnly = await prisma.record_type.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends record_typeUpdateManyAndReturnArgs>(args: SelectSubset<T, record_typeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Record_type.
     * @param {record_typeUpsertArgs} args - Arguments to update or create a Record_type.
     * @example
     * // Update or create a Record_type
     * const record_type = await prisma.record_type.upsert({
     *   create: {
     *     // ... data to create a Record_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record_type we want to update
     *   }
     * })
     */
    upsert<T extends record_typeUpsertArgs>(args: SelectSubset<T, record_typeUpsertArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Record_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeCountArgs} args - Arguments to filter Record_types to count.
     * @example
     * // Count the number of Record_types
     * const count = await prisma.record_type.count({
     *   where: {
     *     // ... the filter for the Record_types we want to count
     *   }
     * })
    **/
    count<T extends record_typeCountArgs>(
      args?: Subset<T, record_typeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Record_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Record_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Record_typeAggregateArgs>(args: Subset<T, Record_typeAggregateArgs>): Prisma.PrismaPromise<GetRecord_typeAggregateType<T>>

    /**
     * Group by Record_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {record_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends record_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: record_typeGroupByArgs['orderBy'] }
        : { orderBy?: record_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, record_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecord_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the record_type model
   */
  readonly fields: record_typeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for record_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__record_typeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    records<T extends record_type$recordsArgs<ExtArgs> = {}>(args?: Subset<T, record_type$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the record_type model
   */ 
  interface record_typeFieldRefs {
    readonly id: FieldRef<"record_type", 'Int'>
    readonly name: FieldRef<"record_type", 'String'>
  }
    

  // Custom InputTypes
  /**
   * record_type findUnique
   */
  export type record_typeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter, which record_type to fetch.
     */
    where: record_typeWhereUniqueInput
  }

  /**
   * record_type findUniqueOrThrow
   */
  export type record_typeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter, which record_type to fetch.
     */
    where: record_typeWhereUniqueInput
  }

  /**
   * record_type findFirst
   */
  export type record_typeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter, which record_type to fetch.
     */
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     */
    orderBy?: record_typeOrderByWithRelationInput | record_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for record_types.
     */
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of record_types.
     */
    distinct?: Record_typeScalarFieldEnum | Record_typeScalarFieldEnum[]
  }

  /**
   * record_type findFirstOrThrow
   */
  export type record_typeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter, which record_type to fetch.
     */
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     */
    orderBy?: record_typeOrderByWithRelationInput | record_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for record_types.
     */
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of record_types.
     */
    distinct?: Record_typeScalarFieldEnum | Record_typeScalarFieldEnum[]
  }

  /**
   * record_type findMany
   */
  export type record_typeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter, which record_types to fetch.
     */
    where?: record_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of record_types to fetch.
     */
    orderBy?: record_typeOrderByWithRelationInput | record_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing record_types.
     */
    cursor?: record_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` record_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` record_types.
     */
    skip?: number
    distinct?: Record_typeScalarFieldEnum | Record_typeScalarFieldEnum[]
  }

  /**
   * record_type create
   */
  export type record_typeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * The data needed to create a record_type.
     */
    data: XOR<record_typeCreateInput, record_typeUncheckedCreateInput>
  }

  /**
   * record_type createMany
   */
  export type record_typeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many record_types.
     */
    data: record_typeCreateManyInput | record_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * record_type createManyAndReturn
   */
  export type record_typeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * The data used to create many record_types.
     */
    data: record_typeCreateManyInput | record_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * record_type update
   */
  export type record_typeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * The data needed to update a record_type.
     */
    data: XOR<record_typeUpdateInput, record_typeUncheckedUpdateInput>
    /**
     * Choose, which record_type to update.
     */
    where: record_typeWhereUniqueInput
  }

  /**
   * record_type updateMany
   */
  export type record_typeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update record_types.
     */
    data: XOR<record_typeUpdateManyMutationInput, record_typeUncheckedUpdateManyInput>
    /**
     * Filter which record_types to update
     */
    where?: record_typeWhereInput
    /**
     * Limit how many record_types to update.
     */
    limit?: number
  }

  /**
   * record_type updateManyAndReturn
   */
  export type record_typeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * The data used to update record_types.
     */
    data: XOR<record_typeUpdateManyMutationInput, record_typeUncheckedUpdateManyInput>
    /**
     * Filter which record_types to update
     */
    where?: record_typeWhereInput
    /**
     * Limit how many record_types to update.
     */
    limit?: number
  }

  /**
   * record_type upsert
   */
  export type record_typeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * The filter to search for the record_type to update in case it exists.
     */
    where: record_typeWhereUniqueInput
    /**
     * In case the record_type found by the `where` argument doesn't exist, create a new record_type with this data.
     */
    create: XOR<record_typeCreateInput, record_typeUncheckedCreateInput>
    /**
     * In case the record_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<record_typeUpdateInput, record_typeUncheckedUpdateInput>
  }

  /**
   * record_type delete
   */
  export type record_typeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
    /**
     * Filter which record_type to delete.
     */
    where: record_typeWhereUniqueInput
  }

  /**
   * record_type deleteMany
   */
  export type record_typeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which record_types to delete
     */
    where?: record_typeWhereInput
    /**
     * Limit how many record_types to delete.
     */
    limit?: number
  }

  /**
   * record_type.records
   */
  export type record_type$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    where?: recordsWhereInput
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    cursor?: recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * record_type without action
   */
  export type record_typeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the record_type
     */
    select?: record_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the record_type
     */
    omit?: record_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: record_typeInclude<ExtArgs> | null
  }


  /**
   * Model records
   */

  export type AggregateRecords = {
    _count: RecordsCountAggregateOutputType | null
    _avg: RecordsAvgAggregateOutputType | null
    _sum: RecordsSumAggregateOutputType | null
    _min: RecordsMinAggregateOutputType | null
    _max: RecordsMaxAggregateOutputType | null
  }

  export type RecordsAvgAggregateOutputType = {
    id: number | null
    domain_id: number | null
    priority: number | null
    ttl: number | null
    record_type_id: number | null
  }

  export type RecordsSumAggregateOutputType = {
    id: number | null
    domain_id: number | null
    priority: number | null
    ttl: number | null
    record_type_id: number | null
  }

  export type RecordsMinAggregateOutputType = {
    id: number | null
    domain_id: number | null
    record_name: string | null
    target: string | null
    priority: number | null
    ttl: number | null
    record_type_id: number | null
    created_at: Date | null
  }

  export type RecordsMaxAggregateOutputType = {
    id: number | null
    domain_id: number | null
    record_name: string | null
    target: string | null
    priority: number | null
    ttl: number | null
    record_type_id: number | null
    created_at: Date | null
  }

  export type RecordsCountAggregateOutputType = {
    id: number
    domain_id: number
    record_name: number
    target: number
    priority: number
    ttl: number
    record_type_id: number
    created_at: number
    _all: number
  }


  export type RecordsAvgAggregateInputType = {
    id?: true
    domain_id?: true
    priority?: true
    ttl?: true
    record_type_id?: true
  }

  export type RecordsSumAggregateInputType = {
    id?: true
    domain_id?: true
    priority?: true
    ttl?: true
    record_type_id?: true
  }

  export type RecordsMinAggregateInputType = {
    id?: true
    domain_id?: true
    record_name?: true
    target?: true
    priority?: true
    ttl?: true
    record_type_id?: true
    created_at?: true
  }

  export type RecordsMaxAggregateInputType = {
    id?: true
    domain_id?: true
    record_name?: true
    target?: true
    priority?: true
    ttl?: true
    record_type_id?: true
    created_at?: true
  }

  export type RecordsCountAggregateInputType = {
    id?: true
    domain_id?: true
    record_name?: true
    target?: true
    priority?: true
    ttl?: true
    record_type_id?: true
    created_at?: true
    _all?: true
  }

  export type RecordsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records to aggregate.
     */
    where?: recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     */
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned records
    **/
    _count?: true | RecordsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecordsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecordsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordsMaxAggregateInputType
  }

  export type GetRecordsAggregateType<T extends RecordsAggregateArgs> = {
        [P in keyof T & keyof AggregateRecords]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecords[P]>
      : GetScalarType<T[P], AggregateRecords[P]>
  }




  export type recordsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recordsWhereInput
    orderBy?: recordsOrderByWithAggregationInput | recordsOrderByWithAggregationInput[]
    by: RecordsScalarFieldEnum[] | RecordsScalarFieldEnum
    having?: recordsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordsCountAggregateInputType | true
    _avg?: RecordsAvgAggregateInputType
    _sum?: RecordsSumAggregateInputType
    _min?: RecordsMinAggregateInputType
    _max?: RecordsMaxAggregateInputType
  }

  export type RecordsGroupByOutputType = {
    id: number
    domain_id: number
    record_name: string
    target: string
    priority: number | null
    ttl: number | null
    record_type_id: number
    created_at: Date | null
    _count: RecordsCountAggregateOutputType | null
    _avg: RecordsAvgAggregateOutputType | null
    _sum: RecordsSumAggregateOutputType | null
    _min: RecordsMinAggregateOutputType | null
    _max: RecordsMaxAggregateOutputType | null
  }

  type GetRecordsGroupByPayload<T extends recordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordsGroupByOutputType[P]>
            : GetScalarType<T[P], RecordsGroupByOutputType[P]>
        }
      >
    >


  export type recordsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain_id?: boolean
    record_name?: boolean
    target?: boolean
    priority?: boolean
    ttl?: boolean
    record_type_id?: boolean
    created_at?: boolean
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records"]>

  export type recordsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain_id?: boolean
    record_name?: boolean
    target?: boolean
    priority?: boolean
    ttl?: boolean
    record_type_id?: boolean
    created_at?: boolean
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records"]>

  export type recordsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain_id?: boolean
    record_name?: boolean
    target?: boolean
    priority?: boolean
    ttl?: boolean
    record_type_id?: boolean
    created_at?: boolean
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records"]>

  export type recordsSelectScalar = {
    id?: boolean
    domain_id?: boolean
    record_name?: boolean
    target?: boolean
    priority?: boolean
    ttl?: boolean
    record_type_id?: boolean
    created_at?: boolean
  }

  export type recordsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "domain_id" | "record_name" | "target" | "priority" | "ttl" | "record_type_id" | "created_at", ExtArgs["result"]["records"]>
  export type recordsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }
  export type recordsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }
  export type recordsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | domainsDefaultArgs<ExtArgs>
    record_type?: boolean | record_typeDefaultArgs<ExtArgs>
  }

  export type $recordsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "records"
    objects: {
      domains: Prisma.$domainsPayload<ExtArgs>
      record_type: Prisma.$record_typePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      domain_id: number
      record_name: string
      target: string
      priority: number | null
      ttl: number | null
      record_type_id: number
      created_at: Date | null
    }, ExtArgs["result"]["records"]>
    composites: {}
  }

  type recordsGetPayload<S extends boolean | null | undefined | recordsDefaultArgs> = $Result.GetResult<Prisma.$recordsPayload, S>

  type recordsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<recordsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecordsCountAggregateInputType | true
    }

  export interface recordsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['records'], meta: { name: 'records' } }
    /**
     * Find zero or one Records that matches the filter.
     * @param {recordsFindUniqueArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends recordsFindUniqueArgs>(args: SelectSubset<T, recordsFindUniqueArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Records that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {recordsFindUniqueOrThrowArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends recordsFindUniqueOrThrowArgs>(args: SelectSubset<T, recordsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsFindFirstArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends recordsFindFirstArgs>(args?: SelectSubset<T, recordsFindFirstArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Records that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsFindFirstOrThrowArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends recordsFindFirstOrThrowArgs>(args?: SelectSubset<T, recordsFindFirstOrThrowArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records
     * const records = await prisma.records.findMany()
     * 
     * // Get first 10 Records
     * const records = await prisma.records.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordsWithIdOnly = await prisma.records.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends recordsFindManyArgs>(args?: SelectSubset<T, recordsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Records.
     * @param {recordsCreateArgs} args - Arguments to create a Records.
     * @example
     * // Create one Records
     * const Records = await prisma.records.create({
     *   data: {
     *     // ... data to create a Records
     *   }
     * })
     * 
     */
    create<T extends recordsCreateArgs>(args: SelectSubset<T, recordsCreateArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Records.
     * @param {recordsCreateManyArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const records = await prisma.records.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends recordsCreateManyArgs>(args?: SelectSubset<T, recordsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records and returns the data saved in the database.
     * @param {recordsCreateManyAndReturnArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const records = await prisma.records.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records and only return the `id`
     * const recordsWithIdOnly = await prisma.records.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends recordsCreateManyAndReturnArgs>(args?: SelectSubset<T, recordsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Records.
     * @param {recordsDeleteArgs} args - Arguments to delete one Records.
     * @example
     * // Delete one Records
     * const Records = await prisma.records.delete({
     *   where: {
     *     // ... filter to delete one Records
     *   }
     * })
     * 
     */
    delete<T extends recordsDeleteArgs>(args: SelectSubset<T, recordsDeleteArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Records.
     * @param {recordsUpdateArgs} args - Arguments to update one Records.
     * @example
     * // Update one Records
     * const records = await prisma.records.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends recordsUpdateArgs>(args: SelectSubset<T, recordsUpdateArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Records.
     * @param {recordsDeleteManyArgs} args - Arguments to filter Records to delete.
     * @example
     * // Delete a few Records
     * const { count } = await prisma.records.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends recordsDeleteManyArgs>(args?: SelectSubset<T, recordsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records
     * const records = await prisma.records.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends recordsUpdateManyArgs>(args: SelectSubset<T, recordsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records and returns the data updated in the database.
     * @param {recordsUpdateManyAndReturnArgs} args - Arguments to update many Records.
     * @example
     * // Update many Records
     * const records = await prisma.records.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Records and only return the `id`
     * const recordsWithIdOnly = await prisma.records.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends recordsUpdateManyAndReturnArgs>(args: SelectSubset<T, recordsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Records.
     * @param {recordsUpsertArgs} args - Arguments to update or create a Records.
     * @example
     * // Update or create a Records
     * const records = await prisma.records.upsert({
     *   create: {
     *     // ... data to create a Records
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Records we want to update
     *   }
     * })
     */
    upsert<T extends recordsUpsertArgs>(args: SelectSubset<T, recordsUpsertArgs<ExtArgs>>): Prisma__recordsClient<$Result.GetResult<Prisma.$recordsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsCountArgs} args - Arguments to filter Records to count.
     * @example
     * // Count the number of Records
     * const count = await prisma.records.count({
     *   where: {
     *     // ... the filter for the Records we want to count
     *   }
     * })
    **/
    count<T extends recordsCountArgs>(
      args?: Subset<T, recordsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordsAggregateArgs>(args: Subset<T, RecordsAggregateArgs>): Prisma.PrismaPromise<GetRecordsAggregateType<T>>

    /**
     * Group by Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends recordsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: recordsGroupByArgs['orderBy'] }
        : { orderBy?: recordsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, recordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the records model
   */
  readonly fields: recordsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for records.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__recordsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domains<T extends domainsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, domainsDefaultArgs<ExtArgs>>): Prisma__domainsClient<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    record_type<T extends record_typeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, record_typeDefaultArgs<ExtArgs>>): Prisma__record_typeClient<$Result.GetResult<Prisma.$record_typePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the records model
   */ 
  interface recordsFieldRefs {
    readonly id: FieldRef<"records", 'Int'>
    readonly domain_id: FieldRef<"records", 'Int'>
    readonly record_name: FieldRef<"records", 'String'>
    readonly target: FieldRef<"records", 'String'>
    readonly priority: FieldRef<"records", 'Int'>
    readonly ttl: FieldRef<"records", 'Int'>
    readonly record_type_id: FieldRef<"records", 'Int'>
    readonly created_at: FieldRef<"records", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * records findUnique
   */
  export type recordsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter, which records to fetch.
     */
    where: recordsWhereUniqueInput
  }

  /**
   * records findUniqueOrThrow
   */
  export type recordsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter, which records to fetch.
     */
    where: recordsWhereUniqueInput
  }

  /**
   * records findFirst
   */
  export type recordsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter, which records to fetch.
     */
    where?: recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     */
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records.
     */
    cursor?: recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records.
     */
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * records findFirstOrThrow
   */
  export type recordsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter, which records to fetch.
     */
    where?: recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     */
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records.
     */
    cursor?: recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records.
     */
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * records findMany
   */
  export type recordsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter, which records to fetch.
     */
    where?: recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records to fetch.
     */
    orderBy?: recordsOrderByWithRelationInput | recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing records.
     */
    cursor?: recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records.
     */
    skip?: number
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * records create
   */
  export type recordsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * The data needed to create a records.
     */
    data: XOR<recordsCreateInput, recordsUncheckedCreateInput>
  }

  /**
   * records createMany
   */
  export type recordsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many records.
     */
    data: recordsCreateManyInput | recordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * records createManyAndReturn
   */
  export type recordsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * The data used to create many records.
     */
    data: recordsCreateManyInput | recordsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * records update
   */
  export type recordsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * The data needed to update a records.
     */
    data: XOR<recordsUpdateInput, recordsUncheckedUpdateInput>
    /**
     * Choose, which records to update.
     */
    where: recordsWhereUniqueInput
  }

  /**
   * records updateMany
   */
  export type recordsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update records.
     */
    data: XOR<recordsUpdateManyMutationInput, recordsUncheckedUpdateManyInput>
    /**
     * Filter which records to update
     */
    where?: recordsWhereInput
    /**
     * Limit how many records to update.
     */
    limit?: number
  }

  /**
   * records updateManyAndReturn
   */
  export type recordsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * The data used to update records.
     */
    data: XOR<recordsUpdateManyMutationInput, recordsUncheckedUpdateManyInput>
    /**
     * Filter which records to update
     */
    where?: recordsWhereInput
    /**
     * Limit how many records to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * records upsert
   */
  export type recordsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * The filter to search for the records to update in case it exists.
     */
    where: recordsWhereUniqueInput
    /**
     * In case the records found by the `where` argument doesn't exist, create a new records with this data.
     */
    create: XOR<recordsCreateInput, recordsUncheckedCreateInput>
    /**
     * In case the records was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recordsUpdateInput, recordsUncheckedUpdateInput>
  }

  /**
   * records delete
   */
  export type recordsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
    /**
     * Filter which records to delete.
     */
    where: recordsWhereUniqueInput
  }

  /**
   * records deleteMany
   */
  export type recordsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records to delete
     */
    where?: recordsWhereInput
    /**
     * Limit how many records to delete.
     */
    limit?: number
  }

  /**
   * records without action
   */
  export type recordsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records
     */
    select?: recordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records
     */
    omit?: recordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recordsInclude<ExtArgs> | null
  }


  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type roleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type roleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type roleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type roleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["role"]>
  export type roleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type roleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type roleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<roleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends roleFindUniqueArgs>(args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs>(args: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends roleFindFirstArgs>(args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs>(args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends roleFindManyArgs>(args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends roleCreateArgs>(args: SelectSubset<T, roleCreateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Roles.
     * @param {roleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends roleCreateManyArgs>(args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {roleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends roleCreateManyAndReturnArgs>(args?: SelectSubset<T, roleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends roleDeleteArgs>(args: SelectSubset<T, roleDeleteArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends roleUpdateArgs>(args: SelectSubset<T, roleUpdateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends roleDeleteManyArgs>(args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends roleUpdateManyArgs>(args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {roleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends roleUpdateManyAndReturnArgs>(args: SelectSubset<T, roleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends roleUpsertArgs>(args: SelectSubset<T, roleUpsertArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends role$usersArgs<ExtArgs> = {}>(args?: Subset<T, role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the role model
   */ 
  interface roleFieldRefs {
    readonly id: FieldRef<"role", 'Int'>
    readonly name: FieldRef<"role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }

  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * role createManyAndReturn
   */
  export type roleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * role updateManyAndReturn
   */
  export type roleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }

  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to delete.
     */
    limit?: number
  }

  /**
   * role.users
   */
  export type role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
  }


  /**
   * Model status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which status to aggregate.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusOrderByWithRelationInput | statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type statusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusWhereInput
    orderBy?: statusOrderByWithAggregationInput | statusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    name: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends statusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type statusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    domain_dns_server?: boolean | status$domain_dns_serverArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type statusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["status"]>

  export type statusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["status"]>

  export type statusSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type statusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["status"]>
  export type statusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain_dns_server?: boolean | status$domain_dns_serverArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type statusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type statusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $statusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "status"
    objects: {
      domain_dns_server: Prisma.$domain_dns_serverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type statusGetPayload<S extends boolean | null | undefined | statusDefaultArgs> = $Result.GetResult<Prisma.$statusPayload, S>

  type statusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<statusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface statusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['status'], meta: { name: 'status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {statusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusFindUniqueArgs>(args: SelectSubset<T, statusFindUniqueArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {statusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusFindUniqueOrThrowArgs>(args: SelectSubset<T, statusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusFindFirstArgs>(args?: SelectSubset<T, statusFindFirstArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusFindFirstOrThrowArgs>(args?: SelectSubset<T, statusFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends statusFindManyArgs>(args?: SelectSubset<T, statusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Status.
     * @param {statusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
     */
    create<T extends statusCreateArgs>(args: SelectSubset<T, statusCreateArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Statuses.
     * @param {statusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusCreateManyArgs>(args?: SelectSubset<T, statusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Statuses and returns the data saved in the database.
     * @param {statusCreateManyAndReturnArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Statuses and only return the `id`
     * const statusWithIdOnly = await prisma.status.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends statusCreateManyAndReturnArgs>(args?: SelectSubset<T, statusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Status.
     * @param {statusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
     */
    delete<T extends statusDeleteArgs>(args: SelectSubset<T, statusDeleteArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Status.
     * @param {statusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusUpdateArgs>(args: SelectSubset<T, statusUpdateArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Statuses.
     * @param {statusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusDeleteManyArgs>(args?: SelectSubset<T, statusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusUpdateManyArgs>(args: SelectSubset<T, statusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses and returns the data updated in the database.
     * @param {statusUpdateManyAndReturnArgs} args - Arguments to update many Statuses.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Statuses and only return the `id`
     * const statusWithIdOnly = await prisma.status.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends statusUpdateManyAndReturnArgs>(args: SelectSubset<T, statusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Status.
     * @param {statusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
     */
    upsert<T extends statusUpsertArgs>(args: SelectSubset<T, statusUpsertArgs<ExtArgs>>): Prisma__statusClient<$Result.GetResult<Prisma.$statusPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends statusCountArgs>(
      args?: Subset<T, statusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusGroupByArgs['orderBy'] }
        : { orderBy?: statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the status model
   */
  readonly fields: statusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain_dns_server<T extends status$domain_dns_serverArgs<ExtArgs> = {}>(args?: Subset<T, status$domain_dns_serverArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domain_dns_serverPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the status model
   */ 
  interface statusFieldRefs {
    readonly id: FieldRef<"status", 'Int'>
    readonly name: FieldRef<"status", 'String'>
  }
    

  // Custom InputTypes
  /**
   * status findUnique
   */
  export type statusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter, which status to fetch.
     */
    where: statusWhereUniqueInput
  }

  /**
   * status findUniqueOrThrow
   */
  export type statusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter, which status to fetch.
     */
    where: statusWhereUniqueInput
  }

  /**
   * status findFirst
   */
  export type statusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter, which status to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusOrderByWithRelationInput | statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * status findFirstOrThrow
   */
  export type statusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter, which status to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusOrderByWithRelationInput | statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * status findMany
   */
  export type statusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusOrderByWithRelationInput | statusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statuses.
     */
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * status create
   */
  export type statusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * The data needed to create a status.
     */
    data: XOR<statusCreateInput, statusUncheckedCreateInput>
  }

  /**
   * status createMany
   */
  export type statusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statuses.
     */
    data: statusCreateManyInput | statusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * status createManyAndReturn
   */
  export type statusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * The data used to create many statuses.
     */
    data: statusCreateManyInput | statusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * status update
   */
  export type statusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * The data needed to update a status.
     */
    data: XOR<statusUpdateInput, statusUncheckedUpdateInput>
    /**
     * Choose, which status to update.
     */
    where: statusWhereUniqueInput
  }

  /**
   * status updateMany
   */
  export type statusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statuses.
     */
    data: XOR<statusUpdateManyMutationInput, statusUncheckedUpdateManyInput>
    /**
     * Filter which statuses to update
     */
    where?: statusWhereInput
    /**
     * Limit how many statuses to update.
     */
    limit?: number
  }

  /**
   * status updateManyAndReturn
   */
  export type statusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * The data used to update statuses.
     */
    data: XOR<statusUpdateManyMutationInput, statusUncheckedUpdateManyInput>
    /**
     * Filter which statuses to update
     */
    where?: statusWhereInput
    /**
     * Limit how many statuses to update.
     */
    limit?: number
  }

  /**
   * status upsert
   */
  export type statusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * The filter to search for the status to update in case it exists.
     */
    where: statusWhereUniqueInput
    /**
     * In case the status found by the `where` argument doesn't exist, create a new status with this data.
     */
    create: XOR<statusCreateInput, statusUncheckedCreateInput>
    /**
     * In case the status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusUpdateInput, statusUncheckedUpdateInput>
  }

  /**
   * status delete
   */
  export type statusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
    /**
     * Filter which status to delete.
     */
    where: statusWhereUniqueInput
  }

  /**
   * status deleteMany
   */
  export type statusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statuses to delete
     */
    where?: statusWhereInput
    /**
     * Limit how many statuses to delete.
     */
    limit?: number
  }

  /**
   * status.domain_dns_server
   */
  export type status$domain_dns_serverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domain_dns_server
     */
    select?: domain_dns_serverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domain_dns_server
     */
    omit?: domain_dns_serverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domain_dns_serverInclude<ExtArgs> | null
    where?: domain_dns_serverWhereInput
    orderBy?: domain_dns_serverOrderByWithRelationInput | domain_dns_serverOrderByWithRelationInput[]
    cursor?: domain_dns_serverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Domain_dns_serverScalarFieldEnum | Domain_dns_serverScalarFieldEnum[]
  }

  /**
   * status without action
   */
  export type statusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the status
     */
    select?: statusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the status
     */
    omit?: statusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    role_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    last_name: string | null
    first_name: string | null
    email: string | null
    password: string | null
    role_id: number | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    last_name: string | null
    first_name: string | null
    email: string | null
    password: string | null
    role_id: number | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    last_name: number
    first_name: number
    email: number
    password: number
    role_id: number
    created_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    role_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    role_id?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    role_id?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    last_name?: true
    first_name?: true
    email?: true
    password?: true
    role_id?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    last_name: string | null
    first_name: string | null
    email: string | null
    password: string
    role_id: number | null
    created_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    created_at?: boolean
    domains?: boolean | users$domainsArgs<ExtArgs>
    role?: boolean | users$roleArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    created_at?: boolean
    role?: boolean | users$roleArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    created_at?: boolean
    role?: boolean | users$roleArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    last_name?: boolean
    first_name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    created_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "last_name" | "first_name" | "email" | "password" | "role_id" | "created_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domains?: boolean | users$domainsArgs<ExtArgs>
    role?: boolean | users$roleArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | users$roleArgs<ExtArgs>
  }
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | users$roleArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      domains: Prisma.$domainsPayload<ExtArgs>[]
      role: Prisma.$rolePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      last_name: string | null
      first_name: string | null
      email: string | null
      password: string
      role_id: number | null
      created_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domains<T extends users$domainsArgs<ExtArgs> = {}>(args?: Subset<T, users$domainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$domainsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    role<T extends users$roleArgs<ExtArgs> = {}>(args?: Subset<T, users$roleArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly last_name: FieldRef<"users", 'String'>
    readonly first_name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role_id: FieldRef<"users", 'Int'>
    readonly created_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.domains
   */
  export type users$domainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the domains
     */
    select?: domainsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the domains
     */
    omit?: domainsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: domainsInclude<ExtArgs> | null
    where?: domainsWhereInput
    orderBy?: domainsOrderByWithRelationInput | domainsOrderByWithRelationInput[]
    cursor?: domainsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DomainsScalarFieldEnum | DomainsScalarFieldEnum[]
  }

  /**
   * users.role
   */
  export type users$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    where?: roleWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Dns_serversScalarFieldEnum: {
    id: 'id',
    ip_address: 'ip_address',
    url: 'url',
    created_at: 'created_at'
  };

  export type Dns_serversScalarFieldEnum = (typeof Dns_serversScalarFieldEnum)[keyof typeof Dns_serversScalarFieldEnum]


  export const Domain_dns_serverScalarFieldEnum: {
    domain_id: 'domain_id',
    dns_server_id: 'dns_server_id',
    status_id: 'status_id',
    created_at: 'created_at'
  };

  export type Domain_dns_serverScalarFieldEnum = (typeof Domain_dns_serverScalarFieldEnum)[keyof typeof Domain_dns_serverScalarFieldEnum]


  export const DomainsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    created_at: 'created_at'
  };

  export type DomainsScalarFieldEnum = (typeof DomainsScalarFieldEnum)[keyof typeof DomainsScalarFieldEnum]


  export const Record_typeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Record_typeScalarFieldEnum = (typeof Record_typeScalarFieldEnum)[keyof typeof Record_typeScalarFieldEnum]


  export const RecordsScalarFieldEnum: {
    id: 'id',
    domain_id: 'domain_id',
    record_name: 'record_name',
    target: 'target',
    priority: 'priority',
    ttl: 'ttl',
    record_type_id: 'record_type_id',
    created_at: 'created_at'
  };

  export type RecordsScalarFieldEnum = (typeof RecordsScalarFieldEnum)[keyof typeof RecordsScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    last_name: 'last_name',
    first_name: 'first_name',
    email: 'email',
    password: 'password',
    role_id: 'role_id',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type dns_serversWhereInput = {
    AND?: dns_serversWhereInput | dns_serversWhereInput[]
    OR?: dns_serversWhereInput[]
    NOT?: dns_serversWhereInput | dns_serversWhereInput[]
    id?: IntFilter<"dns_servers"> | number
    ip_address?: StringFilter<"dns_servers"> | string
    url?: StringNullableFilter<"dns_servers"> | string | null
    created_at?: DateTimeNullableFilter<"dns_servers"> | Date | string | null
    domain_dns_server?: Domain_dns_serverListRelationFilter
  }

  export type dns_serversOrderByWithRelationInput = {
    id?: SortOrder
    ip_address?: SortOrder
    url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    domain_dns_server?: domain_dns_serverOrderByRelationAggregateInput
  }

  export type dns_serversWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ip_address?: string
    AND?: dns_serversWhereInput | dns_serversWhereInput[]
    OR?: dns_serversWhereInput[]
    NOT?: dns_serversWhereInput | dns_serversWhereInput[]
    url?: StringNullableFilter<"dns_servers"> | string | null
    created_at?: DateTimeNullableFilter<"dns_servers"> | Date | string | null
    domain_dns_server?: Domain_dns_serverListRelationFilter
  }, "id" | "ip_address">

  export type dns_serversOrderByWithAggregationInput = {
    id?: SortOrder
    ip_address?: SortOrder
    url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: dns_serversCountOrderByAggregateInput
    _avg?: dns_serversAvgOrderByAggregateInput
    _max?: dns_serversMaxOrderByAggregateInput
    _min?: dns_serversMinOrderByAggregateInput
    _sum?: dns_serversSumOrderByAggregateInput
  }

  export type dns_serversScalarWhereWithAggregatesInput = {
    AND?: dns_serversScalarWhereWithAggregatesInput | dns_serversScalarWhereWithAggregatesInput[]
    OR?: dns_serversScalarWhereWithAggregatesInput[]
    NOT?: dns_serversScalarWhereWithAggregatesInput | dns_serversScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"dns_servers"> | number
    ip_address?: StringWithAggregatesFilter<"dns_servers"> | string
    url?: StringNullableWithAggregatesFilter<"dns_servers"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"dns_servers"> | Date | string | null
  }

  export type domain_dns_serverWhereInput = {
    AND?: domain_dns_serverWhereInput | domain_dns_serverWhereInput[]
    OR?: domain_dns_serverWhereInput[]
    NOT?: domain_dns_serverWhereInput | domain_dns_serverWhereInput[]
    domain_id?: IntFilter<"domain_dns_server"> | number
    dns_server_id?: IntFilter<"domain_dns_server"> | number
    status_id?: IntFilter<"domain_dns_server"> | number
    created_at?: DateTimeNullableFilter<"domain_dns_server"> | Date | string | null
    dns_servers?: XOR<Dns_serversScalarRelationFilter, dns_serversWhereInput>
    domains?: XOR<DomainsScalarRelationFilter, domainsWhereInput>
    status?: XOR<StatusScalarRelationFilter, statusWhereInput>
  }

  export type domain_dns_serverOrderByWithRelationInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    dns_servers?: dns_serversOrderByWithRelationInput
    domains?: domainsOrderByWithRelationInput
    status?: statusOrderByWithRelationInput
  }

  export type domain_dns_serverWhereUniqueInput = Prisma.AtLeast<{
    domain_id_dns_server_id?: domain_dns_serverDomain_idDns_server_idCompoundUniqueInput
    AND?: domain_dns_serverWhereInput | domain_dns_serverWhereInput[]
    OR?: domain_dns_serverWhereInput[]
    NOT?: domain_dns_serverWhereInput | domain_dns_serverWhereInput[]
    domain_id?: IntFilter<"domain_dns_server"> | number
    dns_server_id?: IntFilter<"domain_dns_server"> | number
    status_id?: IntFilter<"domain_dns_server"> | number
    created_at?: DateTimeNullableFilter<"domain_dns_server"> | Date | string | null
    dns_servers?: XOR<Dns_serversScalarRelationFilter, dns_serversWhereInput>
    domains?: XOR<DomainsScalarRelationFilter, domainsWhereInput>
    status?: XOR<StatusScalarRelationFilter, statusWhereInput>
  }, "domain_id_dns_server_id">

  export type domain_dns_serverOrderByWithAggregationInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: domain_dns_serverCountOrderByAggregateInput
    _avg?: domain_dns_serverAvgOrderByAggregateInput
    _max?: domain_dns_serverMaxOrderByAggregateInput
    _min?: domain_dns_serverMinOrderByAggregateInput
    _sum?: domain_dns_serverSumOrderByAggregateInput
  }

  export type domain_dns_serverScalarWhereWithAggregatesInput = {
    AND?: domain_dns_serverScalarWhereWithAggregatesInput | domain_dns_serverScalarWhereWithAggregatesInput[]
    OR?: domain_dns_serverScalarWhereWithAggregatesInput[]
    NOT?: domain_dns_serverScalarWhereWithAggregatesInput | domain_dns_serverScalarWhereWithAggregatesInput[]
    domain_id?: IntWithAggregatesFilter<"domain_dns_server"> | number
    dns_server_id?: IntWithAggregatesFilter<"domain_dns_server"> | number
    status_id?: IntWithAggregatesFilter<"domain_dns_server"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"domain_dns_server"> | Date | string | null
  }

  export type domainsWhereInput = {
    AND?: domainsWhereInput | domainsWhereInput[]
    OR?: domainsWhereInput[]
    NOT?: domainsWhereInput | domainsWhereInput[]
    id?: IntFilter<"domains"> | number
    user_id?: IntFilter<"domains"> | number
    name?: StringFilter<"domains"> | string
    created_at?: DateTimeNullableFilter<"domains"> | Date | string | null
    domain_dns_server?: Domain_dns_serverListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    records?: RecordsListRelationFilter
  }

  export type domainsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    domain_dns_server?: domain_dns_serverOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    records?: recordsOrderByRelationAggregateInput
  }

  export type domainsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: domainsWhereInput | domainsWhereInput[]
    OR?: domainsWhereInput[]
    NOT?: domainsWhereInput | domainsWhereInput[]
    user_id?: IntFilter<"domains"> | number
    created_at?: DateTimeNullableFilter<"domains"> | Date | string | null
    domain_dns_server?: Domain_dns_serverListRelationFilter
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
    records?: RecordsListRelationFilter
  }, "id" | "name">

  export type domainsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: domainsCountOrderByAggregateInput
    _avg?: domainsAvgOrderByAggregateInput
    _max?: domainsMaxOrderByAggregateInput
    _min?: domainsMinOrderByAggregateInput
    _sum?: domainsSumOrderByAggregateInput
  }

  export type domainsScalarWhereWithAggregatesInput = {
    AND?: domainsScalarWhereWithAggregatesInput | domainsScalarWhereWithAggregatesInput[]
    OR?: domainsScalarWhereWithAggregatesInput[]
    NOT?: domainsScalarWhereWithAggregatesInput | domainsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"domains"> | number
    user_id?: IntWithAggregatesFilter<"domains"> | number
    name?: StringWithAggregatesFilter<"domains"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"domains"> | Date | string | null
  }

  export type record_typeWhereInput = {
    AND?: record_typeWhereInput | record_typeWhereInput[]
    OR?: record_typeWhereInput[]
    NOT?: record_typeWhereInput | record_typeWhereInput[]
    id?: IntFilter<"record_type"> | number
    name?: StringFilter<"record_type"> | string
    records?: RecordsListRelationFilter
  }

  export type record_typeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    records?: recordsOrderByRelationAggregateInput
  }

  export type record_typeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: record_typeWhereInput | record_typeWhereInput[]
    OR?: record_typeWhereInput[]
    NOT?: record_typeWhereInput | record_typeWhereInput[]
    records?: RecordsListRelationFilter
  }, "id" | "name">

  export type record_typeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: record_typeCountOrderByAggregateInput
    _avg?: record_typeAvgOrderByAggregateInput
    _max?: record_typeMaxOrderByAggregateInput
    _min?: record_typeMinOrderByAggregateInput
    _sum?: record_typeSumOrderByAggregateInput
  }

  export type record_typeScalarWhereWithAggregatesInput = {
    AND?: record_typeScalarWhereWithAggregatesInput | record_typeScalarWhereWithAggregatesInput[]
    OR?: record_typeScalarWhereWithAggregatesInput[]
    NOT?: record_typeScalarWhereWithAggregatesInput | record_typeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"record_type"> | number
    name?: StringWithAggregatesFilter<"record_type"> | string
  }

  export type recordsWhereInput = {
    AND?: recordsWhereInput | recordsWhereInput[]
    OR?: recordsWhereInput[]
    NOT?: recordsWhereInput | recordsWhereInput[]
    id?: IntFilter<"records"> | number
    domain_id?: IntFilter<"records"> | number
    record_name?: StringFilter<"records"> | string
    target?: StringFilter<"records"> | string
    priority?: IntNullableFilter<"records"> | number | null
    ttl?: IntNullableFilter<"records"> | number | null
    record_type_id?: IntFilter<"records"> | number
    created_at?: DateTimeNullableFilter<"records"> | Date | string | null
    domains?: XOR<DomainsScalarRelationFilter, domainsWhereInput>
    record_type?: XOR<Record_typeScalarRelationFilter, record_typeWhereInput>
  }

  export type recordsOrderByWithRelationInput = {
    id?: SortOrder
    domain_id?: SortOrder
    record_name?: SortOrder
    target?: SortOrder
    priority?: SortOrderInput | SortOrder
    ttl?: SortOrderInput | SortOrder
    record_type_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    domains?: domainsOrderByWithRelationInput
    record_type?: record_typeOrderByWithRelationInput
  }

  export type recordsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: recordsWhereInput | recordsWhereInput[]
    OR?: recordsWhereInput[]
    NOT?: recordsWhereInput | recordsWhereInput[]
    domain_id?: IntFilter<"records"> | number
    record_name?: StringFilter<"records"> | string
    target?: StringFilter<"records"> | string
    priority?: IntNullableFilter<"records"> | number | null
    ttl?: IntNullableFilter<"records"> | number | null
    record_type_id?: IntFilter<"records"> | number
    created_at?: DateTimeNullableFilter<"records"> | Date | string | null
    domains?: XOR<DomainsScalarRelationFilter, domainsWhereInput>
    record_type?: XOR<Record_typeScalarRelationFilter, record_typeWhereInput>
  }, "id">

  export type recordsOrderByWithAggregationInput = {
    id?: SortOrder
    domain_id?: SortOrder
    record_name?: SortOrder
    target?: SortOrder
    priority?: SortOrderInput | SortOrder
    ttl?: SortOrderInput | SortOrder
    record_type_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: recordsCountOrderByAggregateInput
    _avg?: recordsAvgOrderByAggregateInput
    _max?: recordsMaxOrderByAggregateInput
    _min?: recordsMinOrderByAggregateInput
    _sum?: recordsSumOrderByAggregateInput
  }

  export type recordsScalarWhereWithAggregatesInput = {
    AND?: recordsScalarWhereWithAggregatesInput | recordsScalarWhereWithAggregatesInput[]
    OR?: recordsScalarWhereWithAggregatesInput[]
    NOT?: recordsScalarWhereWithAggregatesInput | recordsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"records"> | number
    domain_id?: IntWithAggregatesFilter<"records"> | number
    record_name?: StringWithAggregatesFilter<"records"> | string
    target?: StringWithAggregatesFilter<"records"> | string
    priority?: IntNullableWithAggregatesFilter<"records"> | number | null
    ttl?: IntNullableWithAggregatesFilter<"records"> | number | null
    record_type_id?: IntWithAggregatesFilter<"records"> | number
    created_at?: DateTimeNullableWithAggregatesFilter<"records"> | Date | string | null
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    id?: IntFilter<"role"> | number
    name?: StringFilter<"role"> | string
    users?: UsersListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: usersOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    users?: UsersListRelationFilter
  }, "id" | "name">

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"role"> | number
    name?: StringWithAggregatesFilter<"role"> | string
  }

  export type statusWhereInput = {
    AND?: statusWhereInput | statusWhereInput[]
    OR?: statusWhereInput[]
    NOT?: statusWhereInput | statusWhereInput[]
    id?: IntFilter<"status"> | number
    name?: StringFilter<"status"> | string
    domain_dns_server?: Domain_dns_serverListRelationFilter
  }

  export type statusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    domain_dns_server?: domain_dns_serverOrderByRelationAggregateInput
  }

  export type statusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: statusWhereInput | statusWhereInput[]
    OR?: statusWhereInput[]
    NOT?: statusWhereInput | statusWhereInput[]
    domain_dns_server?: Domain_dns_serverListRelationFilter
  }, "id" | "name">

  export type statusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: statusCountOrderByAggregateInput
    _avg?: statusAvgOrderByAggregateInput
    _max?: statusMaxOrderByAggregateInput
    _min?: statusMinOrderByAggregateInput
    _sum?: statusSumOrderByAggregateInput
  }

  export type statusScalarWhereWithAggregatesInput = {
    AND?: statusScalarWhereWithAggregatesInput | statusScalarWhereWithAggregatesInput[]
    OR?: statusScalarWhereWithAggregatesInput[]
    NOT?: statusScalarWhereWithAggregatesInput | statusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"status"> | number
    name?: StringWithAggregatesFilter<"status"> | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    last_name?: StringNullableFilter<"users"> | string | null
    first_name?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    role_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    domains?: DomainsListRelationFilter
    role?: XOR<RoleNullableScalarRelationFilter, roleWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    last_name?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    role_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    domains?: domainsOrderByRelationAggregateInput
    role?: roleOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    last_name?: StringNullableFilter<"users"> | string | null
    first_name?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    role_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    domains?: DomainsListRelationFilter
    role?: XOR<RoleNullableScalarRelationFilter, roleWhereInput> | null
  }, "id" | "username">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    last_name?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    role_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    last_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    first_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    role_id?: IntNullableWithAggregatesFilter<"users"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type dns_serversCreateInput = {
    ip_address: string
    url?: string | null
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverCreateNestedManyWithoutDns_serversInput
  }

  export type dns_serversUncheckedCreateInput = {
    id?: number
    ip_address: string
    url?: string | null
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedCreateNestedManyWithoutDns_serversInput
  }

  export type dns_serversUpdateInput = {
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUpdateManyWithoutDns_serversNestedInput
  }

  export type dns_serversUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedUpdateManyWithoutDns_serversNestedInput
  }

  export type dns_serversCreateManyInput = {
    id?: number
    ip_address: string
    url?: string | null
    created_at?: Date | string | null
  }

  export type dns_serversUpdateManyMutationInput = {
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dns_serversUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverCreateInput = {
    created_at?: Date | string | null
    dns_servers: dns_serversCreateNestedOneWithoutDomain_dns_serverInput
    domains: domainsCreateNestedOneWithoutDomain_dns_serverInput
    status?: statusCreateNestedOneWithoutDomain_dns_serverInput
  }

  export type domain_dns_serverUncheckedCreateInput = {
    domain_id: number
    dns_server_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dns_servers?: dns_serversUpdateOneRequiredWithoutDomain_dns_serverNestedInput
    domains?: domainsUpdateOneRequiredWithoutDomain_dns_serverNestedInput
    status?: statusUpdateOneRequiredWithoutDomain_dns_serverNestedInput
  }

  export type domain_dns_serverUncheckedUpdateInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    dns_server_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverCreateManyInput = {
    domain_id: number
    dns_server_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverUncheckedUpdateManyInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    dns_server_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domainsCreateInput = {
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverCreateNestedManyWithoutDomainsInput
    users: usersCreateNestedOneWithoutDomainsInput
    records?: recordsCreateNestedManyWithoutDomainsInput
  }

  export type domainsUncheckedCreateInput = {
    id?: number
    user_id: number
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedCreateNestedManyWithoutDomainsInput
    records?: recordsUncheckedCreateNestedManyWithoutDomainsInput
  }

  export type domainsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUpdateManyWithoutDomainsNestedInput
    users?: usersUpdateOneRequiredWithoutDomainsNestedInput
    records?: recordsUpdateManyWithoutDomainsNestedInput
  }

  export type domainsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedUpdateManyWithoutDomainsNestedInput
    records?: recordsUncheckedUpdateManyWithoutDomainsNestedInput
  }

  export type domainsCreateManyInput = {
    id?: number
    user_id: number
    name: string
    created_at?: Date | string | null
  }

  export type domainsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domainsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type record_typeCreateInput = {
    name: string
    records?: recordsCreateNestedManyWithoutRecord_typeInput
  }

  export type record_typeUncheckedCreateInput = {
    id?: number
    name: string
    records?: recordsUncheckedCreateNestedManyWithoutRecord_typeInput
  }

  export type record_typeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    records?: recordsUpdateManyWithoutRecord_typeNestedInput
  }

  export type record_typeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    records?: recordsUncheckedUpdateManyWithoutRecord_typeNestedInput
  }

  export type record_typeCreateManyInput = {
    id?: number
    name: string
  }

  export type record_typeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type record_typeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type recordsCreateInput = {
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    created_at?: Date | string | null
    domains: domainsCreateNestedOneWithoutRecordsInput
    record_type: record_typeCreateNestedOneWithoutRecordsInput
  }

  export type recordsUncheckedCreateInput = {
    id?: number
    domain_id: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    record_type_id: number
    created_at?: Date | string | null
  }

  export type recordsUpdateInput = {
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUpdateOneRequiredWithoutRecordsNestedInput
    record_type?: record_typeUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type recordsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain_id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    record_type_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsCreateManyInput = {
    id?: number
    domain_id: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    record_type_id: number
    created_at?: Date | string | null
  }

  export type recordsUpdateManyMutationInput = {
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain_id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    record_type_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type roleCreateInput = {
    name: string
    users?: usersCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    id?: number
    name: string
    users?: usersUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: usersUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type roleCreateManyInput = {
    id?: number
    name: string
  }

  export type roleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type statusCreateInput = {
    name: string
    domain_dns_server?: domain_dns_serverCreateNestedManyWithoutStatusInput
  }

  export type statusUncheckedCreateInput = {
    id?: number
    name: string
    domain_dns_server?: domain_dns_serverUncheckedCreateNestedManyWithoutStatusInput
  }

  export type statusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    domain_dns_server?: domain_dns_serverUpdateManyWithoutStatusNestedInput
  }

  export type statusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    domain_dns_server?: domain_dns_serverUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type statusCreateManyInput = {
    id?: number
    name: string
  }

  export type statusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type statusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    created_at?: Date | string | null
    domains?: domainsCreateNestedManyWithoutUsersInput
    role?: roleCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    role_id?: number | null
    created_at?: Date | string | null
    domains?: domainsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUpdateManyWithoutUsersNestedInput
    role?: roleUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    role_id?: number | null
    created_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Domain_dns_serverListRelationFilter = {
    every?: domain_dns_serverWhereInput
    some?: domain_dns_serverWhereInput
    none?: domain_dns_serverWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type domain_dns_serverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dns_serversCountOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type dns_serversAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type dns_serversMaxOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type dns_serversMinOrderByAggregateInput = {
    id?: SortOrder
    ip_address?: SortOrder
    url?: SortOrder
    created_at?: SortOrder
  }

  export type dns_serversSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type Dns_serversScalarRelationFilter = {
    is?: dns_serversWhereInput
    isNot?: dns_serversWhereInput
  }

  export type DomainsScalarRelationFilter = {
    is?: domainsWhereInput
    isNot?: domainsWhereInput
  }

  export type StatusScalarRelationFilter = {
    is?: statusWhereInput
    isNot?: statusWhereInput
  }

  export type domain_dns_serverDomain_idDns_server_idCompoundUniqueInput = {
    domain_id: number
    dns_server_id: number
  }

  export type domain_dns_serverCountOrderByAggregateInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
    created_at?: SortOrder
  }

  export type domain_dns_serverAvgOrderByAggregateInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
  }

  export type domain_dns_serverMaxOrderByAggregateInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
    created_at?: SortOrder
  }

  export type domain_dns_serverMinOrderByAggregateInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
    created_at?: SortOrder
  }

  export type domain_dns_serverSumOrderByAggregateInput = {
    domain_id?: SortOrder
    dns_server_id?: SortOrder
    status_id?: SortOrder
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type RecordsListRelationFilter = {
    every?: recordsWhereInput
    some?: recordsWhereInput
    none?: recordsWhereInput
  }

  export type recordsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type domainsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type domainsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type domainsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type domainsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type domainsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type record_typeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type record_typeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type record_typeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type record_typeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type record_typeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Record_typeScalarRelationFilter = {
    is?: record_typeWhereInput
    isNot?: record_typeWhereInput
  }

  export type recordsCountOrderByAggregateInput = {
    id?: SortOrder
    domain_id?: SortOrder
    record_name?: SortOrder
    target?: SortOrder
    priority?: SortOrder
    ttl?: SortOrder
    record_type_id?: SortOrder
    created_at?: SortOrder
  }

  export type recordsAvgOrderByAggregateInput = {
    id?: SortOrder
    domain_id?: SortOrder
    priority?: SortOrder
    ttl?: SortOrder
    record_type_id?: SortOrder
  }

  export type recordsMaxOrderByAggregateInput = {
    id?: SortOrder
    domain_id?: SortOrder
    record_name?: SortOrder
    target?: SortOrder
    priority?: SortOrder
    ttl?: SortOrder
    record_type_id?: SortOrder
    created_at?: SortOrder
  }

  export type recordsMinOrderByAggregateInput = {
    id?: SortOrder
    domain_id?: SortOrder
    record_name?: SortOrder
    target?: SortOrder
    priority?: SortOrder
    ttl?: SortOrder
    record_type_id?: SortOrder
    created_at?: SortOrder
  }

  export type recordsSumOrderByAggregateInput = {
    id?: SortOrder
    domain_id?: SortOrder
    priority?: SortOrder
    ttl?: SortOrder
    record_type_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type statusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type statusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type statusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type statusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type statusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DomainsListRelationFilter = {
    every?: domainsWhereInput
    some?: domainsWhereInput
    none?: domainsWhereInput
  }

  export type RoleNullableScalarRelationFilter = {
    is?: roleWhereInput | null
    isNot?: roleWhereInput | null
  }

  export type domainsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    last_name?: SortOrder
    first_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    created_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
  }

  export type domain_dns_serverCreateNestedManyWithoutDns_serversInput = {
    create?: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput> | domain_dns_serverCreateWithoutDns_serversInput[] | domain_dns_serverUncheckedCreateWithoutDns_serversInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDns_serversInput | domain_dns_serverCreateOrConnectWithoutDns_serversInput[]
    createMany?: domain_dns_serverCreateManyDns_serversInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type domain_dns_serverUncheckedCreateNestedManyWithoutDns_serversInput = {
    create?: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput> | domain_dns_serverCreateWithoutDns_serversInput[] | domain_dns_serverUncheckedCreateWithoutDns_serversInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDns_serversInput | domain_dns_serverCreateOrConnectWithoutDns_serversInput[]
    createMany?: domain_dns_serverCreateManyDns_serversInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type domain_dns_serverUpdateManyWithoutDns_serversNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput> | domain_dns_serverCreateWithoutDns_serversInput[] | domain_dns_serverUncheckedCreateWithoutDns_serversInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDns_serversInput | domain_dns_serverCreateOrConnectWithoutDns_serversInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutDns_serversInput | domain_dns_serverUpsertWithWhereUniqueWithoutDns_serversInput[]
    createMany?: domain_dns_serverCreateManyDns_serversInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutDns_serversInput | domain_dns_serverUpdateWithWhereUniqueWithoutDns_serversInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutDns_serversInput | domain_dns_serverUpdateManyWithWhereWithoutDns_serversInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutDns_serversNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput> | domain_dns_serverCreateWithoutDns_serversInput[] | domain_dns_serverUncheckedCreateWithoutDns_serversInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDns_serversInput | domain_dns_serverCreateOrConnectWithoutDns_serversInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutDns_serversInput | domain_dns_serverUpsertWithWhereUniqueWithoutDns_serversInput[]
    createMany?: domain_dns_serverCreateManyDns_serversInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutDns_serversInput | domain_dns_serverUpdateWithWhereUniqueWithoutDns_serversInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutDns_serversInput | domain_dns_serverUpdateManyWithWhereWithoutDns_serversInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type dns_serversCreateNestedOneWithoutDomain_dns_serverInput = {
    create?: XOR<dns_serversCreateWithoutDomain_dns_serverInput, dns_serversUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: dns_serversCreateOrConnectWithoutDomain_dns_serverInput
    connect?: dns_serversWhereUniqueInput
  }

  export type domainsCreateNestedOneWithoutDomain_dns_serverInput = {
    create?: XOR<domainsCreateWithoutDomain_dns_serverInput, domainsUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: domainsCreateOrConnectWithoutDomain_dns_serverInput
    connect?: domainsWhereUniqueInput
  }

  export type statusCreateNestedOneWithoutDomain_dns_serverInput = {
    create?: XOR<statusCreateWithoutDomain_dns_serverInput, statusUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: statusCreateOrConnectWithoutDomain_dns_serverInput
    connect?: statusWhereUniqueInput
  }

  export type dns_serversUpdateOneRequiredWithoutDomain_dns_serverNestedInput = {
    create?: XOR<dns_serversCreateWithoutDomain_dns_serverInput, dns_serversUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: dns_serversCreateOrConnectWithoutDomain_dns_serverInput
    upsert?: dns_serversUpsertWithoutDomain_dns_serverInput
    connect?: dns_serversWhereUniqueInput
    update?: XOR<XOR<dns_serversUpdateToOneWithWhereWithoutDomain_dns_serverInput, dns_serversUpdateWithoutDomain_dns_serverInput>, dns_serversUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type domainsUpdateOneRequiredWithoutDomain_dns_serverNestedInput = {
    create?: XOR<domainsCreateWithoutDomain_dns_serverInput, domainsUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: domainsCreateOrConnectWithoutDomain_dns_serverInput
    upsert?: domainsUpsertWithoutDomain_dns_serverInput
    connect?: domainsWhereUniqueInput
    update?: XOR<XOR<domainsUpdateToOneWithWhereWithoutDomain_dns_serverInput, domainsUpdateWithoutDomain_dns_serverInput>, domainsUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type statusUpdateOneRequiredWithoutDomain_dns_serverNestedInput = {
    create?: XOR<statusCreateWithoutDomain_dns_serverInput, statusUncheckedCreateWithoutDomain_dns_serverInput>
    connectOrCreate?: statusCreateOrConnectWithoutDomain_dns_serverInput
    upsert?: statusUpsertWithoutDomain_dns_serverInput
    connect?: statusWhereUniqueInput
    update?: XOR<XOR<statusUpdateToOneWithWhereWithoutDomain_dns_serverInput, statusUpdateWithoutDomain_dns_serverInput>, statusUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type domain_dns_serverCreateNestedManyWithoutDomainsInput = {
    create?: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput> | domain_dns_serverCreateWithoutDomainsInput[] | domain_dns_serverUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDomainsInput | domain_dns_serverCreateOrConnectWithoutDomainsInput[]
    createMany?: domain_dns_serverCreateManyDomainsInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutDomainsInput = {
    create?: XOR<usersCreateWithoutDomainsInput, usersUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDomainsInput
    connect?: usersWhereUniqueInput
  }

  export type recordsCreateNestedManyWithoutDomainsInput = {
    create?: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput> | recordsCreateWithoutDomainsInput[] | recordsUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutDomainsInput | recordsCreateOrConnectWithoutDomainsInput[]
    createMany?: recordsCreateManyDomainsInputEnvelope
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
  }

  export type domain_dns_serverUncheckedCreateNestedManyWithoutDomainsInput = {
    create?: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput> | domain_dns_serverCreateWithoutDomainsInput[] | domain_dns_serverUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDomainsInput | domain_dns_serverCreateOrConnectWithoutDomainsInput[]
    createMany?: domain_dns_serverCreateManyDomainsInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type recordsUncheckedCreateNestedManyWithoutDomainsInput = {
    create?: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput> | recordsCreateWithoutDomainsInput[] | recordsUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutDomainsInput | recordsCreateOrConnectWithoutDomainsInput[]
    createMany?: recordsCreateManyDomainsInputEnvelope
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
  }

  export type domain_dns_serverUpdateManyWithoutDomainsNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput> | domain_dns_serverCreateWithoutDomainsInput[] | domain_dns_serverUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDomainsInput | domain_dns_serverCreateOrConnectWithoutDomainsInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutDomainsInput | domain_dns_serverUpsertWithWhereUniqueWithoutDomainsInput[]
    createMany?: domain_dns_serverCreateManyDomainsInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutDomainsInput | domain_dns_serverUpdateWithWhereUniqueWithoutDomainsInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutDomainsInput | domain_dns_serverUpdateManyWithWhereWithoutDomainsInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutDomainsNestedInput = {
    create?: XOR<usersCreateWithoutDomainsInput, usersUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: usersCreateOrConnectWithoutDomainsInput
    upsert?: usersUpsertWithoutDomainsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutDomainsInput, usersUpdateWithoutDomainsInput>, usersUncheckedUpdateWithoutDomainsInput>
  }

  export type recordsUpdateManyWithoutDomainsNestedInput = {
    create?: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput> | recordsCreateWithoutDomainsInput[] | recordsUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutDomainsInput | recordsCreateOrConnectWithoutDomainsInput[]
    upsert?: recordsUpsertWithWhereUniqueWithoutDomainsInput | recordsUpsertWithWhereUniqueWithoutDomainsInput[]
    createMany?: recordsCreateManyDomainsInputEnvelope
    set?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    disconnect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    delete?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    update?: recordsUpdateWithWhereUniqueWithoutDomainsInput | recordsUpdateWithWhereUniqueWithoutDomainsInput[]
    updateMany?: recordsUpdateManyWithWhereWithoutDomainsInput | recordsUpdateManyWithWhereWithoutDomainsInput[]
    deleteMany?: recordsScalarWhereInput | recordsScalarWhereInput[]
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutDomainsNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput> | domain_dns_serverCreateWithoutDomainsInput[] | domain_dns_serverUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutDomainsInput | domain_dns_serverCreateOrConnectWithoutDomainsInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutDomainsInput | domain_dns_serverUpsertWithWhereUniqueWithoutDomainsInput[]
    createMany?: domain_dns_serverCreateManyDomainsInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutDomainsInput | domain_dns_serverUpdateWithWhereUniqueWithoutDomainsInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutDomainsInput | domain_dns_serverUpdateManyWithWhereWithoutDomainsInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type recordsUncheckedUpdateManyWithoutDomainsNestedInput = {
    create?: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput> | recordsCreateWithoutDomainsInput[] | recordsUncheckedCreateWithoutDomainsInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutDomainsInput | recordsCreateOrConnectWithoutDomainsInput[]
    upsert?: recordsUpsertWithWhereUniqueWithoutDomainsInput | recordsUpsertWithWhereUniqueWithoutDomainsInput[]
    createMany?: recordsCreateManyDomainsInputEnvelope
    set?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    disconnect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    delete?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    update?: recordsUpdateWithWhereUniqueWithoutDomainsInput | recordsUpdateWithWhereUniqueWithoutDomainsInput[]
    updateMany?: recordsUpdateManyWithWhereWithoutDomainsInput | recordsUpdateManyWithWhereWithoutDomainsInput[]
    deleteMany?: recordsScalarWhereInput | recordsScalarWhereInput[]
  }

  export type recordsCreateNestedManyWithoutRecord_typeInput = {
    create?: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput> | recordsCreateWithoutRecord_typeInput[] | recordsUncheckedCreateWithoutRecord_typeInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutRecord_typeInput | recordsCreateOrConnectWithoutRecord_typeInput[]
    createMany?: recordsCreateManyRecord_typeInputEnvelope
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
  }

  export type recordsUncheckedCreateNestedManyWithoutRecord_typeInput = {
    create?: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput> | recordsCreateWithoutRecord_typeInput[] | recordsUncheckedCreateWithoutRecord_typeInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutRecord_typeInput | recordsCreateOrConnectWithoutRecord_typeInput[]
    createMany?: recordsCreateManyRecord_typeInputEnvelope
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
  }

  export type recordsUpdateManyWithoutRecord_typeNestedInput = {
    create?: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput> | recordsCreateWithoutRecord_typeInput[] | recordsUncheckedCreateWithoutRecord_typeInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutRecord_typeInput | recordsCreateOrConnectWithoutRecord_typeInput[]
    upsert?: recordsUpsertWithWhereUniqueWithoutRecord_typeInput | recordsUpsertWithWhereUniqueWithoutRecord_typeInput[]
    createMany?: recordsCreateManyRecord_typeInputEnvelope
    set?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    disconnect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    delete?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    update?: recordsUpdateWithWhereUniqueWithoutRecord_typeInput | recordsUpdateWithWhereUniqueWithoutRecord_typeInput[]
    updateMany?: recordsUpdateManyWithWhereWithoutRecord_typeInput | recordsUpdateManyWithWhereWithoutRecord_typeInput[]
    deleteMany?: recordsScalarWhereInput | recordsScalarWhereInput[]
  }

  export type recordsUncheckedUpdateManyWithoutRecord_typeNestedInput = {
    create?: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput> | recordsCreateWithoutRecord_typeInput[] | recordsUncheckedCreateWithoutRecord_typeInput[]
    connectOrCreate?: recordsCreateOrConnectWithoutRecord_typeInput | recordsCreateOrConnectWithoutRecord_typeInput[]
    upsert?: recordsUpsertWithWhereUniqueWithoutRecord_typeInput | recordsUpsertWithWhereUniqueWithoutRecord_typeInput[]
    createMany?: recordsCreateManyRecord_typeInputEnvelope
    set?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    disconnect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    delete?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    connect?: recordsWhereUniqueInput | recordsWhereUniqueInput[]
    update?: recordsUpdateWithWhereUniqueWithoutRecord_typeInput | recordsUpdateWithWhereUniqueWithoutRecord_typeInput[]
    updateMany?: recordsUpdateManyWithWhereWithoutRecord_typeInput | recordsUpdateManyWithWhereWithoutRecord_typeInput[]
    deleteMany?: recordsScalarWhereInput | recordsScalarWhereInput[]
  }

  export type domainsCreateNestedOneWithoutRecordsInput = {
    create?: XOR<domainsCreateWithoutRecordsInput, domainsUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: domainsCreateOrConnectWithoutRecordsInput
    connect?: domainsWhereUniqueInput
  }

  export type record_typeCreateNestedOneWithoutRecordsInput = {
    create?: XOR<record_typeCreateWithoutRecordsInput, record_typeUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: record_typeCreateOrConnectWithoutRecordsInput
    connect?: record_typeWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type domainsUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<domainsCreateWithoutRecordsInput, domainsUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: domainsCreateOrConnectWithoutRecordsInput
    upsert?: domainsUpsertWithoutRecordsInput
    connect?: domainsWhereUniqueInput
    update?: XOR<XOR<domainsUpdateToOneWithWhereWithoutRecordsInput, domainsUpdateWithoutRecordsInput>, domainsUncheckedUpdateWithoutRecordsInput>
  }

  export type record_typeUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<record_typeCreateWithoutRecordsInput, record_typeUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: record_typeCreateOrConnectWithoutRecordsInput
    upsert?: record_typeUpsertWithoutRecordsInput
    connect?: record_typeWhereUniqueInput
    update?: XOR<XOR<record_typeUpdateToOneWithWhereWithoutRecordsInput, record_typeUpdateWithoutRecordsInput>, record_typeUncheckedUpdateWithoutRecordsInput>
  }

  export type usersCreateNestedManyWithoutRoleInput = {
    create?: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput> | usersCreateWithoutRoleInput[] | usersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: usersCreateOrConnectWithoutRoleInput | usersCreateOrConnectWithoutRoleInput[]
    createMany?: usersCreateManyRoleInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput> | usersCreateWithoutRoleInput[] | usersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: usersCreateOrConnectWithoutRoleInput | usersCreateOrConnectWithoutRoleInput[]
    createMany?: usersCreateManyRoleInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type usersUpdateManyWithoutRoleNestedInput = {
    create?: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput> | usersCreateWithoutRoleInput[] | usersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: usersCreateOrConnectWithoutRoleInput | usersCreateOrConnectWithoutRoleInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutRoleInput | usersUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: usersCreateManyRoleInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutRoleInput | usersUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: usersUpdateManyWithWhereWithoutRoleInput | usersUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput> | usersCreateWithoutRoleInput[] | usersUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: usersCreateOrConnectWithoutRoleInput | usersCreateOrConnectWithoutRoleInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutRoleInput | usersUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: usersCreateManyRoleInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutRoleInput | usersUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: usersUpdateManyWithWhereWithoutRoleInput | usersUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type domain_dns_serverCreateNestedManyWithoutStatusInput = {
    create?: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput> | domain_dns_serverCreateWithoutStatusInput[] | domain_dns_serverUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutStatusInput | domain_dns_serverCreateOrConnectWithoutStatusInput[]
    createMany?: domain_dns_serverCreateManyStatusInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type domain_dns_serverUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput> | domain_dns_serverCreateWithoutStatusInput[] | domain_dns_serverUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutStatusInput | domain_dns_serverCreateOrConnectWithoutStatusInput[]
    createMany?: domain_dns_serverCreateManyStatusInputEnvelope
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
  }

  export type domain_dns_serverUpdateManyWithoutStatusNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput> | domain_dns_serverCreateWithoutStatusInput[] | domain_dns_serverUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutStatusInput | domain_dns_serverCreateOrConnectWithoutStatusInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutStatusInput | domain_dns_serverUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: domain_dns_serverCreateManyStatusInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutStatusInput | domain_dns_serverUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutStatusInput | domain_dns_serverUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput> | domain_dns_serverCreateWithoutStatusInput[] | domain_dns_serverUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: domain_dns_serverCreateOrConnectWithoutStatusInput | domain_dns_serverCreateOrConnectWithoutStatusInput[]
    upsert?: domain_dns_serverUpsertWithWhereUniqueWithoutStatusInput | domain_dns_serverUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: domain_dns_serverCreateManyStatusInputEnvelope
    set?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    disconnect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    delete?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    connect?: domain_dns_serverWhereUniqueInput | domain_dns_serverWhereUniqueInput[]
    update?: domain_dns_serverUpdateWithWhereUniqueWithoutStatusInput | domain_dns_serverUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: domain_dns_serverUpdateManyWithWhereWithoutStatusInput | domain_dns_serverUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
  }

  export type domainsCreateNestedManyWithoutUsersInput = {
    create?: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput> | domainsCreateWithoutUsersInput[] | domainsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: domainsCreateOrConnectWithoutUsersInput | domainsCreateOrConnectWithoutUsersInput[]
    createMany?: domainsCreateManyUsersInputEnvelope
    connect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
  }

  export type roleCreateNestedOneWithoutUsersInput = {
    create?: XOR<roleCreateWithoutUsersInput, roleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: roleCreateOrConnectWithoutUsersInput
    connect?: roleWhereUniqueInput
  }

  export type domainsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput> | domainsCreateWithoutUsersInput[] | domainsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: domainsCreateOrConnectWithoutUsersInput | domainsCreateOrConnectWithoutUsersInput[]
    createMany?: domainsCreateManyUsersInputEnvelope
    connect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
  }

  export type domainsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput> | domainsCreateWithoutUsersInput[] | domainsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: domainsCreateOrConnectWithoutUsersInput | domainsCreateOrConnectWithoutUsersInput[]
    upsert?: domainsUpsertWithWhereUniqueWithoutUsersInput | domainsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: domainsCreateManyUsersInputEnvelope
    set?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    disconnect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    delete?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    connect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    update?: domainsUpdateWithWhereUniqueWithoutUsersInput | domainsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: domainsUpdateManyWithWhereWithoutUsersInput | domainsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: domainsScalarWhereInput | domainsScalarWhereInput[]
  }

  export type roleUpdateOneWithoutUsersNestedInput = {
    create?: XOR<roleCreateWithoutUsersInput, roleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: roleCreateOrConnectWithoutUsersInput
    upsert?: roleUpsertWithoutUsersInput
    disconnect?: roleWhereInput | boolean
    delete?: roleWhereInput | boolean
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutUsersInput, roleUpdateWithoutUsersInput>, roleUncheckedUpdateWithoutUsersInput>
  }

  export type domainsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput> | domainsCreateWithoutUsersInput[] | domainsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: domainsCreateOrConnectWithoutUsersInput | domainsCreateOrConnectWithoutUsersInput[]
    upsert?: domainsUpsertWithWhereUniqueWithoutUsersInput | domainsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: domainsCreateManyUsersInputEnvelope
    set?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    disconnect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    delete?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    connect?: domainsWhereUniqueInput | domainsWhereUniqueInput[]
    update?: domainsUpdateWithWhereUniqueWithoutUsersInput | domainsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: domainsUpdateManyWithWhereWithoutUsersInput | domainsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: domainsScalarWhereInput | domainsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type domain_dns_serverCreateWithoutDns_serversInput = {
    created_at?: Date | string | null
    domains: domainsCreateNestedOneWithoutDomain_dns_serverInput
    status?: statusCreateNestedOneWithoutDomain_dns_serverInput
  }

  export type domain_dns_serverUncheckedCreateWithoutDns_serversInput = {
    domain_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverCreateOrConnectWithoutDns_serversInput = {
    where: domain_dns_serverWhereUniqueInput
    create: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput>
  }

  export type domain_dns_serverCreateManyDns_serversInputEnvelope = {
    data: domain_dns_serverCreateManyDns_serversInput | domain_dns_serverCreateManyDns_serversInput[]
    skipDuplicates?: boolean
  }

  export type domain_dns_serverUpsertWithWhereUniqueWithoutDns_serversInput = {
    where: domain_dns_serverWhereUniqueInput
    update: XOR<domain_dns_serverUpdateWithoutDns_serversInput, domain_dns_serverUncheckedUpdateWithoutDns_serversInput>
    create: XOR<domain_dns_serverCreateWithoutDns_serversInput, domain_dns_serverUncheckedCreateWithoutDns_serversInput>
  }

  export type domain_dns_serverUpdateWithWhereUniqueWithoutDns_serversInput = {
    where: domain_dns_serverWhereUniqueInput
    data: XOR<domain_dns_serverUpdateWithoutDns_serversInput, domain_dns_serverUncheckedUpdateWithoutDns_serversInput>
  }

  export type domain_dns_serverUpdateManyWithWhereWithoutDns_serversInput = {
    where: domain_dns_serverScalarWhereInput
    data: XOR<domain_dns_serverUpdateManyMutationInput, domain_dns_serverUncheckedUpdateManyWithoutDns_serversInput>
  }

  export type domain_dns_serverScalarWhereInput = {
    AND?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
    OR?: domain_dns_serverScalarWhereInput[]
    NOT?: domain_dns_serverScalarWhereInput | domain_dns_serverScalarWhereInput[]
    domain_id?: IntFilter<"domain_dns_server"> | number
    dns_server_id?: IntFilter<"domain_dns_server"> | number
    status_id?: IntFilter<"domain_dns_server"> | number
    created_at?: DateTimeNullableFilter<"domain_dns_server"> | Date | string | null
  }

  export type dns_serversCreateWithoutDomain_dns_serverInput = {
    ip_address: string
    url?: string | null
    created_at?: Date | string | null
  }

  export type dns_serversUncheckedCreateWithoutDomain_dns_serverInput = {
    id?: number
    ip_address: string
    url?: string | null
    created_at?: Date | string | null
  }

  export type dns_serversCreateOrConnectWithoutDomain_dns_serverInput = {
    where: dns_serversWhereUniqueInput
    create: XOR<dns_serversCreateWithoutDomain_dns_serverInput, dns_serversUncheckedCreateWithoutDomain_dns_serverInput>
  }

  export type domainsCreateWithoutDomain_dns_serverInput = {
    name: string
    created_at?: Date | string | null
    users: usersCreateNestedOneWithoutDomainsInput
    records?: recordsCreateNestedManyWithoutDomainsInput
  }

  export type domainsUncheckedCreateWithoutDomain_dns_serverInput = {
    id?: number
    user_id: number
    name: string
    created_at?: Date | string | null
    records?: recordsUncheckedCreateNestedManyWithoutDomainsInput
  }

  export type domainsCreateOrConnectWithoutDomain_dns_serverInput = {
    where: domainsWhereUniqueInput
    create: XOR<domainsCreateWithoutDomain_dns_serverInput, domainsUncheckedCreateWithoutDomain_dns_serverInput>
  }

  export type statusCreateWithoutDomain_dns_serverInput = {
    name: string
  }

  export type statusUncheckedCreateWithoutDomain_dns_serverInput = {
    id?: number
    name: string
  }

  export type statusCreateOrConnectWithoutDomain_dns_serverInput = {
    where: statusWhereUniqueInput
    create: XOR<statusCreateWithoutDomain_dns_serverInput, statusUncheckedCreateWithoutDomain_dns_serverInput>
  }

  export type dns_serversUpsertWithoutDomain_dns_serverInput = {
    update: XOR<dns_serversUpdateWithoutDomain_dns_serverInput, dns_serversUncheckedUpdateWithoutDomain_dns_serverInput>
    create: XOR<dns_serversCreateWithoutDomain_dns_serverInput, dns_serversUncheckedCreateWithoutDomain_dns_serverInput>
    where?: dns_serversWhereInput
  }

  export type dns_serversUpdateToOneWithWhereWithoutDomain_dns_serverInput = {
    where?: dns_serversWhereInput
    data: XOR<dns_serversUpdateWithoutDomain_dns_serverInput, dns_serversUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type dns_serversUpdateWithoutDomain_dns_serverInput = {
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dns_serversUncheckedUpdateWithoutDomain_dns_serverInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip_address?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domainsUpsertWithoutDomain_dns_serverInput = {
    update: XOR<domainsUpdateWithoutDomain_dns_serverInput, domainsUncheckedUpdateWithoutDomain_dns_serverInput>
    create: XOR<domainsCreateWithoutDomain_dns_serverInput, domainsUncheckedCreateWithoutDomain_dns_serverInput>
    where?: domainsWhereInput
  }

  export type domainsUpdateToOneWithWhereWithoutDomain_dns_serverInput = {
    where?: domainsWhereInput
    data: XOR<domainsUpdateWithoutDomain_dns_serverInput, domainsUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type domainsUpdateWithoutDomain_dns_serverInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutDomainsNestedInput
    records?: recordsUpdateManyWithoutDomainsNestedInput
  }

  export type domainsUncheckedUpdateWithoutDomain_dns_serverInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: recordsUncheckedUpdateManyWithoutDomainsNestedInput
  }

  export type statusUpsertWithoutDomain_dns_serverInput = {
    update: XOR<statusUpdateWithoutDomain_dns_serverInput, statusUncheckedUpdateWithoutDomain_dns_serverInput>
    create: XOR<statusCreateWithoutDomain_dns_serverInput, statusUncheckedCreateWithoutDomain_dns_serverInput>
    where?: statusWhereInput
  }

  export type statusUpdateToOneWithWhereWithoutDomain_dns_serverInput = {
    where?: statusWhereInput
    data: XOR<statusUpdateWithoutDomain_dns_serverInput, statusUncheckedUpdateWithoutDomain_dns_serverInput>
  }

  export type statusUpdateWithoutDomain_dns_serverInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type statusUncheckedUpdateWithoutDomain_dns_serverInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type domain_dns_serverCreateWithoutDomainsInput = {
    created_at?: Date | string | null
    dns_servers: dns_serversCreateNestedOneWithoutDomain_dns_serverInput
    status?: statusCreateNestedOneWithoutDomain_dns_serverInput
  }

  export type domain_dns_serverUncheckedCreateWithoutDomainsInput = {
    dns_server_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverCreateOrConnectWithoutDomainsInput = {
    where: domain_dns_serverWhereUniqueInput
    create: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput>
  }

  export type domain_dns_serverCreateManyDomainsInputEnvelope = {
    data: domain_dns_serverCreateManyDomainsInput | domain_dns_serverCreateManyDomainsInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutDomainsInput = {
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    created_at?: Date | string | null
    role?: roleCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutDomainsInput = {
    id?: number
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    role_id?: number | null
    created_at?: Date | string | null
  }

  export type usersCreateOrConnectWithoutDomainsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDomainsInput, usersUncheckedCreateWithoutDomainsInput>
  }

  export type recordsCreateWithoutDomainsInput = {
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    created_at?: Date | string | null
    record_type: record_typeCreateNestedOneWithoutRecordsInput
  }

  export type recordsUncheckedCreateWithoutDomainsInput = {
    id?: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    record_type_id: number
    created_at?: Date | string | null
  }

  export type recordsCreateOrConnectWithoutDomainsInput = {
    where: recordsWhereUniqueInput
    create: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput>
  }

  export type recordsCreateManyDomainsInputEnvelope = {
    data: recordsCreateManyDomainsInput | recordsCreateManyDomainsInput[]
    skipDuplicates?: boolean
  }

  export type domain_dns_serverUpsertWithWhereUniqueWithoutDomainsInput = {
    where: domain_dns_serverWhereUniqueInput
    update: XOR<domain_dns_serverUpdateWithoutDomainsInput, domain_dns_serverUncheckedUpdateWithoutDomainsInput>
    create: XOR<domain_dns_serverCreateWithoutDomainsInput, domain_dns_serverUncheckedCreateWithoutDomainsInput>
  }

  export type domain_dns_serverUpdateWithWhereUniqueWithoutDomainsInput = {
    where: domain_dns_serverWhereUniqueInput
    data: XOR<domain_dns_serverUpdateWithoutDomainsInput, domain_dns_serverUncheckedUpdateWithoutDomainsInput>
  }

  export type domain_dns_serverUpdateManyWithWhereWithoutDomainsInput = {
    where: domain_dns_serverScalarWhereInput
    data: XOR<domain_dns_serverUpdateManyMutationInput, domain_dns_serverUncheckedUpdateManyWithoutDomainsInput>
  }

  export type usersUpsertWithoutDomainsInput = {
    update: XOR<usersUpdateWithoutDomainsInput, usersUncheckedUpdateWithoutDomainsInput>
    create: XOR<usersCreateWithoutDomainsInput, usersUncheckedCreateWithoutDomainsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutDomainsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutDomainsInput, usersUncheckedUpdateWithoutDomainsInput>
  }

  export type usersUpdateWithoutDomainsInput = {
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: roleUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutDomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsUpsertWithWhereUniqueWithoutDomainsInput = {
    where: recordsWhereUniqueInput
    update: XOR<recordsUpdateWithoutDomainsInput, recordsUncheckedUpdateWithoutDomainsInput>
    create: XOR<recordsCreateWithoutDomainsInput, recordsUncheckedCreateWithoutDomainsInput>
  }

  export type recordsUpdateWithWhereUniqueWithoutDomainsInput = {
    where: recordsWhereUniqueInput
    data: XOR<recordsUpdateWithoutDomainsInput, recordsUncheckedUpdateWithoutDomainsInput>
  }

  export type recordsUpdateManyWithWhereWithoutDomainsInput = {
    where: recordsScalarWhereInput
    data: XOR<recordsUpdateManyMutationInput, recordsUncheckedUpdateManyWithoutDomainsInput>
  }

  export type recordsScalarWhereInput = {
    AND?: recordsScalarWhereInput | recordsScalarWhereInput[]
    OR?: recordsScalarWhereInput[]
    NOT?: recordsScalarWhereInput | recordsScalarWhereInput[]
    id?: IntFilter<"records"> | number
    domain_id?: IntFilter<"records"> | number
    record_name?: StringFilter<"records"> | string
    target?: StringFilter<"records"> | string
    priority?: IntNullableFilter<"records"> | number | null
    ttl?: IntNullableFilter<"records"> | number | null
    record_type_id?: IntFilter<"records"> | number
    created_at?: DateTimeNullableFilter<"records"> | Date | string | null
  }

  export type recordsCreateWithoutRecord_typeInput = {
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    created_at?: Date | string | null
    domains: domainsCreateNestedOneWithoutRecordsInput
  }

  export type recordsUncheckedCreateWithoutRecord_typeInput = {
    id?: number
    domain_id: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    created_at?: Date | string | null
  }

  export type recordsCreateOrConnectWithoutRecord_typeInput = {
    where: recordsWhereUniqueInput
    create: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput>
  }

  export type recordsCreateManyRecord_typeInputEnvelope = {
    data: recordsCreateManyRecord_typeInput | recordsCreateManyRecord_typeInput[]
    skipDuplicates?: boolean
  }

  export type recordsUpsertWithWhereUniqueWithoutRecord_typeInput = {
    where: recordsWhereUniqueInput
    update: XOR<recordsUpdateWithoutRecord_typeInput, recordsUncheckedUpdateWithoutRecord_typeInput>
    create: XOR<recordsCreateWithoutRecord_typeInput, recordsUncheckedCreateWithoutRecord_typeInput>
  }

  export type recordsUpdateWithWhereUniqueWithoutRecord_typeInput = {
    where: recordsWhereUniqueInput
    data: XOR<recordsUpdateWithoutRecord_typeInput, recordsUncheckedUpdateWithoutRecord_typeInput>
  }

  export type recordsUpdateManyWithWhereWithoutRecord_typeInput = {
    where: recordsScalarWhereInput
    data: XOR<recordsUpdateManyMutationInput, recordsUncheckedUpdateManyWithoutRecord_typeInput>
  }

  export type domainsCreateWithoutRecordsInput = {
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverCreateNestedManyWithoutDomainsInput
    users: usersCreateNestedOneWithoutDomainsInput
  }

  export type domainsUncheckedCreateWithoutRecordsInput = {
    id?: number
    user_id: number
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedCreateNestedManyWithoutDomainsInput
  }

  export type domainsCreateOrConnectWithoutRecordsInput = {
    where: domainsWhereUniqueInput
    create: XOR<domainsCreateWithoutRecordsInput, domainsUncheckedCreateWithoutRecordsInput>
  }

  export type record_typeCreateWithoutRecordsInput = {
    name: string
  }

  export type record_typeUncheckedCreateWithoutRecordsInput = {
    id?: number
    name: string
  }

  export type record_typeCreateOrConnectWithoutRecordsInput = {
    where: record_typeWhereUniqueInput
    create: XOR<record_typeCreateWithoutRecordsInput, record_typeUncheckedCreateWithoutRecordsInput>
  }

  export type domainsUpsertWithoutRecordsInput = {
    update: XOR<domainsUpdateWithoutRecordsInput, domainsUncheckedUpdateWithoutRecordsInput>
    create: XOR<domainsCreateWithoutRecordsInput, domainsUncheckedCreateWithoutRecordsInput>
    where?: domainsWhereInput
  }

  export type domainsUpdateToOneWithWhereWithoutRecordsInput = {
    where?: domainsWhereInput
    data: XOR<domainsUpdateWithoutRecordsInput, domainsUncheckedUpdateWithoutRecordsInput>
  }

  export type domainsUpdateWithoutRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUpdateManyWithoutDomainsNestedInput
    users?: usersUpdateOneRequiredWithoutDomainsNestedInput
  }

  export type domainsUncheckedUpdateWithoutRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedUpdateManyWithoutDomainsNestedInput
  }

  export type record_typeUpsertWithoutRecordsInput = {
    update: XOR<record_typeUpdateWithoutRecordsInput, record_typeUncheckedUpdateWithoutRecordsInput>
    create: XOR<record_typeCreateWithoutRecordsInput, record_typeUncheckedCreateWithoutRecordsInput>
    where?: record_typeWhereInput
  }

  export type record_typeUpdateToOneWithWhereWithoutRecordsInput = {
    where?: record_typeWhereInput
    data: XOR<record_typeUpdateWithoutRecordsInput, record_typeUncheckedUpdateWithoutRecordsInput>
  }

  export type record_typeUpdateWithoutRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type record_typeUncheckedUpdateWithoutRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateWithoutRoleInput = {
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    created_at?: Date | string | null
    domains?: domainsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRoleInput = {
    id?: number
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    created_at?: Date | string | null
    domains?: domainsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRoleInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput>
  }

  export type usersCreateManyRoleInputEnvelope = {
    data: usersCreateManyRoleInput | usersCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithWhereUniqueWithoutRoleInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutRoleInput, usersUncheckedUpdateWithoutRoleInput>
    create: XOR<usersCreateWithoutRoleInput, usersUncheckedCreateWithoutRoleInput>
  }

  export type usersUpdateWithWhereUniqueWithoutRoleInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutRoleInput, usersUncheckedUpdateWithoutRoleInput>
  }

  export type usersUpdateManyWithWhereWithoutRoleInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutRoleInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    last_name?: StringNullableFilter<"users"> | string | null
    first_name?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    role_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
  }

  export type domain_dns_serverCreateWithoutStatusInput = {
    created_at?: Date | string | null
    dns_servers: dns_serversCreateNestedOneWithoutDomain_dns_serverInput
    domains: domainsCreateNestedOneWithoutDomain_dns_serverInput
  }

  export type domain_dns_serverUncheckedCreateWithoutStatusInput = {
    domain_id: number
    dns_server_id: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverCreateOrConnectWithoutStatusInput = {
    where: domain_dns_serverWhereUniqueInput
    create: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput>
  }

  export type domain_dns_serverCreateManyStatusInputEnvelope = {
    data: domain_dns_serverCreateManyStatusInput | domain_dns_serverCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type domain_dns_serverUpsertWithWhereUniqueWithoutStatusInput = {
    where: domain_dns_serverWhereUniqueInput
    update: XOR<domain_dns_serverUpdateWithoutStatusInput, domain_dns_serverUncheckedUpdateWithoutStatusInput>
    create: XOR<domain_dns_serverCreateWithoutStatusInput, domain_dns_serverUncheckedCreateWithoutStatusInput>
  }

  export type domain_dns_serverUpdateWithWhereUniqueWithoutStatusInput = {
    where: domain_dns_serverWhereUniqueInput
    data: XOR<domain_dns_serverUpdateWithoutStatusInput, domain_dns_serverUncheckedUpdateWithoutStatusInput>
  }

  export type domain_dns_serverUpdateManyWithWhereWithoutStatusInput = {
    where: domain_dns_serverScalarWhereInput
    data: XOR<domain_dns_serverUpdateManyMutationInput, domain_dns_serverUncheckedUpdateManyWithoutStatusInput>
  }

  export type domainsCreateWithoutUsersInput = {
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverCreateNestedManyWithoutDomainsInput
    records?: recordsCreateNestedManyWithoutDomainsInput
  }

  export type domainsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    created_at?: Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedCreateNestedManyWithoutDomainsInput
    records?: recordsUncheckedCreateNestedManyWithoutDomainsInput
  }

  export type domainsCreateOrConnectWithoutUsersInput = {
    where: domainsWhereUniqueInput
    create: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput>
  }

  export type domainsCreateManyUsersInputEnvelope = {
    data: domainsCreateManyUsersInput | domainsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type roleCreateWithoutUsersInput = {
    name: string
  }

  export type roleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type roleCreateOrConnectWithoutUsersInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutUsersInput, roleUncheckedCreateWithoutUsersInput>
  }

  export type domainsUpsertWithWhereUniqueWithoutUsersInput = {
    where: domainsWhereUniqueInput
    update: XOR<domainsUpdateWithoutUsersInput, domainsUncheckedUpdateWithoutUsersInput>
    create: XOR<domainsCreateWithoutUsersInput, domainsUncheckedCreateWithoutUsersInput>
  }

  export type domainsUpdateWithWhereUniqueWithoutUsersInput = {
    where: domainsWhereUniqueInput
    data: XOR<domainsUpdateWithoutUsersInput, domainsUncheckedUpdateWithoutUsersInput>
  }

  export type domainsUpdateManyWithWhereWithoutUsersInput = {
    where: domainsScalarWhereInput
    data: XOR<domainsUpdateManyMutationInput, domainsUncheckedUpdateManyWithoutUsersInput>
  }

  export type domainsScalarWhereInput = {
    AND?: domainsScalarWhereInput | domainsScalarWhereInput[]
    OR?: domainsScalarWhereInput[]
    NOT?: domainsScalarWhereInput | domainsScalarWhereInput[]
    id?: IntFilter<"domains"> | number
    user_id?: IntFilter<"domains"> | number
    name?: StringFilter<"domains"> | string
    created_at?: DateTimeNullableFilter<"domains"> | Date | string | null
  }

  export type roleUpsertWithoutUsersInput = {
    update: XOR<roleUpdateWithoutUsersInput, roleUncheckedUpdateWithoutUsersInput>
    create: XOR<roleCreateWithoutUsersInput, roleUncheckedCreateWithoutUsersInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutUsersInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutUsersInput, roleUncheckedUpdateWithoutUsersInput>
  }

  export type roleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type roleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type domain_dns_serverCreateManyDns_serversInput = {
    domain_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverUpdateWithoutDns_serversInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUpdateOneRequiredWithoutDomain_dns_serverNestedInput
    status?: statusUpdateOneRequiredWithoutDomain_dns_serverNestedInput
  }

  export type domain_dns_serverUncheckedUpdateWithoutDns_serversInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutDns_serversInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverCreateManyDomainsInput = {
    dns_server_id: number
    status_id?: number
    created_at?: Date | string | null
  }

  export type recordsCreateManyDomainsInput = {
    id?: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    record_type_id: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverUpdateWithoutDomainsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dns_servers?: dns_serversUpdateOneRequiredWithoutDomain_dns_serverNestedInput
    status?: statusUpdateOneRequiredWithoutDomain_dns_serverNestedInput
  }

  export type domain_dns_serverUncheckedUpdateWithoutDomainsInput = {
    dns_server_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutDomainsInput = {
    dns_server_id?: IntFieldUpdateOperationsInput | number
    status_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsUpdateWithoutDomainsInput = {
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    record_type?: record_typeUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type recordsUncheckedUpdateWithoutDomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    record_type_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsUncheckedUpdateManyWithoutDomainsInput = {
    id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    record_type_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsCreateManyRecord_typeInput = {
    id?: number
    domain_id: number
    record_name: string
    target: string
    priority?: number | null
    ttl?: number | null
    created_at?: Date | string | null
  }

  export type recordsUpdateWithoutRecord_typeInput = {
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type recordsUncheckedUpdateWithoutRecord_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain_id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recordsUncheckedUpdateManyWithoutRecord_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    domain_id?: IntFieldUpdateOperationsInput | number
    record_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    ttl?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateManyRoleInput = {
    id?: number
    username: string
    last_name?: string | null
    first_name?: string | null
    email?: string | null
    password: string
    created_at?: Date | string | null
  }

  export type usersUpdateWithoutRoleInput = {
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domains?: domainsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverCreateManyStatusInput = {
    domain_id: number
    dns_server_id: number
    created_at?: Date | string | null
  }

  export type domain_dns_serverUpdateWithoutStatusInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dns_servers?: dns_serversUpdateOneRequiredWithoutDomain_dns_serverNestedInput
    domains?: domainsUpdateOneRequiredWithoutDomain_dns_serverNestedInput
  }

  export type domain_dns_serverUncheckedUpdateWithoutStatusInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    dns_server_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domain_dns_serverUncheckedUpdateManyWithoutStatusInput = {
    domain_id?: IntFieldUpdateOperationsInput | number
    dns_server_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type domainsCreateManyUsersInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type domainsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUpdateManyWithoutDomainsNestedInput
    records?: recordsUpdateManyWithoutDomainsNestedInput
  }

  export type domainsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    domain_dns_server?: domain_dns_serverUncheckedUpdateManyWithoutDomainsNestedInput
    records?: recordsUncheckedUpdateManyWithoutDomainsNestedInput
  }

  export type domainsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}